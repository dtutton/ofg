%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.0%%For: (Henry Hoffarth) ()%%Title: (Donbcrdtan.eps)%%CreationDate: 8/17/09 1:26 PM%%BoundingBox: 54 -54 198 198%%HiResBoundingBox: 54 -54 198 198%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_screens_AI5 1.0 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 126.5 71.5 126.5 71.5%AI3_TileBox: -162 -284 414 450%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 144 252%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -34.6665 220.6665 3 1189 864 18 1 0 50 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:36 14%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 86)(Unnamed gradient 86) 1 2 Bd[<0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A><B3B1B0AFAEADACABAAA9A8A7A6A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787877767574737271706F6E6D6C6B6A69686766656564636261605F5E5D5C5B5A59585757565554535251504F4E4D4C4C4B4A49484746454443424241403F3E3D3C3B3A3A39383736353433333231302F2E2D2D2C2B2A2928272726252423222221201F1E1E1D1C1B1A1A191817161615141313121110100F0E0D0D0C0B0B0A0909080707060505><E6E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCCCBCBCACACAC9C9C9C8C8C7C7C7C6C6C6C5C5C4C4C4C3C3C3C2C2C1C1C1C0C0C0BFBFBEBEBEBDBDBDBCBCBCBBBBBABABAB9B9B9B8B8B8B7B7B6B6B6B5B5B5B4B4B4B3B3B3B2B2B2B1B1B1B0B0B0AFAFAEAEAEADADADACACACABABABABAAAAAAA9A9A9A8A8A8A7A7A7A6A6A6A5A5A5A5A4A4A4A3A3A3A3A2A2A2A1A1A1A1A0A0A0>01 %_Br[0.05 0.7 0.9 0 1 46.0674 0 %_BS%_0.05 0.7 0.9 0 1 46.0674 0 Bs0.0392 0.0196 0.6275 0 1 50 100 %_BS%_0.0392 0.0196 0.6275 0 1 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed 2)0 Auu0 J 0 j 1 w 4 M []0 d0 XR-4192.2314 4390.3438 m-4083.6592 4390.3438 L-4083.6592 4388.9312 L-4192.2314 4388.9312 L-4192.2314 4390.3438 Lnu0 O0 0 0 1 k-4083.6592 4388.9688 m-4083.7109 4388.9312 L-4083.8438 4389.0352 L-4083.6592 4388.9688 Lf-4084.5342 4389.1992 m-4084.5083 4389.2188 -4084.5205 4389.25 -4084.4946 4389.2695 C-4083.9814 4388.9727 L-4084.2109 4388.8047 -4084.3828 4389.312 -4084.5342 4389.1992 cf-4084.6855 4389.1699 m-4084.8843 4389.1006 -4084.9668 4389.2393 -4085.0132 4389.2871 C-4084.9434 4389.1792 -4084.6416 4389.3203 -4084.6855 4389.1699 Cf-4102.2212 4389.2393 m-4102.2026 4389.2383 -4102.1782 4389.2344 -4102.1592 4389.2305 C-4102.1904 4389.2256 -4102.2109 4389.2305 -4102.2212 4389.2393 Cf-4106.7964 4389.7119 m-4106.8442 4389.8228 L-4105.9907 4389.625 -4105.0273 4389.8262 -4104.125 4389.7393 C-4104.1855 4389.7793 L-4101.8945 4389.8223 -4099.7822 4389.6367 -4097.5088 4389.5518 C-4097.5444 4389.5645 -4097.5566 4389.5967 -4097.5933 4389.6094 c-4097.4834 4389.5713 -4097.3618 4389.5 -4097.2388 4389.5088 C-4097.207 4389.5342 -4097.2734 4389.5615 -4097.3125 4389.5723 C-4096.833 4389.7559 -4095.9028 4389.4561 -4095.6025 4389.5977 C-4095.4678 4389.5771 -4095.4082 4389.5015 -4095.4834 4389.4424 C-4093.7041 4389.396 -4091.8013 4389.3604 -4089.9893 4389.2168 C-4089.9019 4389.2422 -4089.8862 4389.292 -4089.9102 4389.3555 C-4088.3613 4389.0576 -4086.7378 4389.1763 -4085.1533 4389.2246 C-4085.0923 4389.1465 -4085.3145 4389.1416 -4085.1587 4389.0596 C-4085.6682 4388.9624 -4086.0918 4389.2524 -4086.5537 4389.1094 C-4086.4946 4389.0342 L-4086.8311 4388.9863 -4086.5625 4389.2246 -4086.9116 4389.127 C-4087.0488 4389.0645 -4086.8772 4389.0313 -4086.9414 4389.0254 C-4087.6558 4389.0566 -4088.4014 4388.9883 -4089.0742 4389.1719 C-4089.2402 4389.0078 -4089.8418 4389.166 -4090.1062 4389.0088 C-4090.2913 4389.0742 -4090.4766 4389.0576 -4090.5469 4389.166 C-4093.0479 4389.0801 -4095.6025 4389.2383 -4098.165 4389.2256 C-4099.3638 4389.5439 -4100.7998 4389.165 -4102.2227 4389.2715 C-4102.2324 4389.2607 -4102.2305 4389.248 -4102.2212 4389.2393 C-4102.6855 4389.3174 -4103.3613 4389.3545 -4103.915 4389.3145 C-4104.3838 4389.4492 L-4107.7158 4389.1729 -4111.1201 4389.3672 -4114.5044 4389.2524 c-4118.3496 4389.1729 -4121.7188 4388.9448 -4125.4639 4389.3633 C-4125.459 4389.3315 -4125.4893 4389.3145 -4125.3926 4389.3027 C-4126.4731 4389.3662 -4127.458 4389.2524 -4128.4756 4389.3184 C-4128.4727 4389.2871 L-4130.998 4389.5483 -4133.7295 4389.2524 -4136.1636 4389.5342 C-4139.1274 4389.5059 -4142.4785 4389.5342 -4145.6157 4389.6147 C-4145.6084 4389.5518 L-4148.1187 4389.6846 -4150.5444 4389.3516 -4153.0488 4389.4512 C-4155.625 4389.3086 -4158.3457 4389.812 -4160.9434 4389.6211 C-4162.5508 4389.312 -4164.6621 4389.9731 -4166.1719 4389.6543 C-4169.2734 4389.1719 -4172.2822 4389.4824 -4175.3828 4389.7715 C-4178.2432 4389.5996 -4181.0996 4390.041 -4183.8701 4389.6899 C-4185.1826 4389.915 -4186.6323 4389.4121 -4188.0933 4389.4766 C-4188.041 4389.5547 L-4188.5654 4389.3184 -4189.209 4389.8848 -4189.5361 4389.5342 C-4189.4814 4389.5176 L-4189.7588 4389.3398 -4190.126 4389.9385 -4190.2949 4389.7256 C-4190.3398 4389.8145 L-4190.6758 4389.8398 -4190.3794 4389.7144 -4190.6387 4389.6792 C-4190.7363 4389.6899 -4190.6758 4389.8398 -4190.8794 4389.7891 C-4190.9238 4389.4287 -4191.7026 4389.8672 -4191.7256 4389.4624 C-4191.542 4389.4624 -4192.0137 4389.3057 -4191.6011 4389.2207 C-4191.7188 4389.1792 -4192.2822 4389.1992 -4192.2314 4389.3711 C-4192.2793 4389.5537 -4192.4995 4389.7129 -4192.1572 4389.8535 C-4192.0884 4389.7207 L-4191.9731 4389.8535 -4192.001 4389.7871 -4191.9595 4389.8867 C-4191.5122 4389.9043 -4191.4521 4390.0977 -4191.1318 4390.1768 C-4191.1348 4390.1729 -4191.1377 4390.1699 -4191.1333 4390.1631 C-4190.9141 4390.0039 -4190.6104 4390.0977 -4190.4375 4390.1211 C-4190.3672 4390.1953 L-4190.2617 4390.3496 -4189.8584 4389.8926 -4189.9946 4390.1582 C-4189.085 4390.0923 -4188.043 4390.0952 -4187.0264 4390.0923 C-4186.8843 4389.9912 -4186.249 4390.1016 -4186.4707 4389.9072 c-4186.2163 4390.1289 -4185.46 4390.1846 -4185.1797 4390.1763 C-4185.1899 4390.1968 -4185.2021 4390.2207 -4185.2461 4390.2129 C-4184.7012 4390.5 -4184.6006 4389.9463 -4184.0898 4390.2983 C-4184.0103 4390.0483 -4183.1626 4390.3774 -4182.874 4390.0854 C-4182.8105 4390.1406 -4182.79 4390.1899 -4182.8125 4390.2344 C-4181.8936 4390.2393 -4180.8789 4390.3296 -4180.1011 4390.3408 C-4179.4365 4390.1235 -4178.4922 4390.4395 -4177.9209 4390.1387 C-4177.4478 4390.2031 -4176.6816 4390.3271 -4176.0215 4390.207 C-4176.085 4390.2432 L-4175.3398 4390.2256 -4174.4082 4390.21 -4173.8965 4390.0215 C-4173.6763 4390.3096 -4173.3545 4390.2524 -4173.0317 4390.3438 C-4172.5342 4390.21 -4171.5293 4390.25 -4170.7695 4390.1289 C-4170.6533 4390.2617 -4170.1426 4390.0723 -4170.1035 4390.2656 C-4167.9756 4389.8926 -4165.3442 4390.0225 -4163.0718 4390.3047 C-4163.1045 4390.3184 L-4162.8096 4390.2129 -4162.4697 4389.9785 -4162.1699 4389.8408 C-4162.1406 4389.8584 -4162.1436 4389.8896 -4162.207 4389.8896 C-4161.792 4389.8535 -4161.4033 4390.0435 -4160.9893 4390.0078 C-4160.9922 4390.0396 -4160.9922 4390.0396 -4161.0596 4390.0703 C-4160.6709 4389.9844 -4160.2559 4390.2246 -4159.7964 4390.0752 C-4159.7715 4390.1265 L-4159.4785 4390.0547 L-4159.4858 4390.1182 -4159.4971 4390.2144 -4159.6533 4390.1934 C-4156.0898 4390.2559 -4152.4116 4389.9248 -4148.7529 4389.9727 C-4148.8877 4390.0332 L-4148.1782 4389.9248 L-4148.1816 4389.957 -4148.2158 4389.9727 -4148.2495 4389.9873 C-4147.3457 4390.0952 -4146.4082 4389.915 -4145.5273 4389.9424 C-4145.5317 4389.9731 -4145.665 4390.0352 -4145.542 4390.0703 C-4144.8896 4389.896 -4144.4946 4390.2969 -4144.168 4389.9355 C-4144.1377 4389.9512 -4144.1172 4390.0332 -4144.1836 4390.0625 C-4142.3701 4389.9424 -4140.5078 4389.9492 -4138.6807 4390.0078 C-4137.1587 4389.6807 -4135.458 4389.9766 -4133.877 4389.7168 C-4133.8853 4389.7822 L-4131.8389 4389.5537 -4129.668 4389.7983 -4127.5469 4389.7524 C-4126.666 4389.7783 -4126.0708 4389.7012 -4125.1855 4389.6968 C-4125.1636 4389.7783 L-4123.6738 4389.4688 -4122.0322 4390.0566 -4120.4785 4389.7158 C-4120.585 4389.8262 L-4120.3442 4389.6553 -4119.6455 4389.8867 -4119.7373 4389.5928 C-4119.4629 4389.6812 L-4118.4067 4389.2944 -4117.541 4389.8604 -4116.2471 4389.6094 C-4116.332 4389.6792 L-4115.9878 4389.625 -4115.5869 4389.5815 -4115.332 4389.6465 C-4115.3716 4389.6563 -4115.3535 4389.6768 -4115.4346 4389.6953 C-4114.3574 4389.9707 -4113.1582 4389.666 -4112.0215 4389.6768 C-4112.1499 4389.8062 L-4111.6006 4389.6543 -4110.5923 4389.7959 -4109.8701 4389.7256 C-4109.9141 4389.7871 L-4109.5483 4389.7012 L-4109.5391 4389.8228 L-4108.5986 4389.8315 -4107.7139 4389.7256 -4106.7964 4389.7119 Cf-4097.3125 4389.5723 m-4097.3154 4389.5713 -4097.3193 4389.5713 -4097.3228 4389.5684 C-4097.3506 4389.5791 -4097.3369 4389.5771 -4097.3125 4389.5723 Cf-4191.0166 4390.2031 m-4191.0596 4390.1953 -4191.0957 4390.1875 -4191.1318 4390.1768 C-4191.123 4390.2031 -4191.0532 4390.1968 -4191.0166 4390.2031 cfUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8065 8260.3066 m-7869.0332 8260.3066 L-7869.0332 8200.2773 L-8065 8200.2773 L-8065 8260.3066 Lnu0 O0.05 0.7 0.9 0 k-8044.96 8253.6826 m-8056.9639 8248.877 -8062.4199 8252.4893 v-8057.6582 8252.332 -8053.4912 8254.1455 v-8062.6182 8254.5146 -8065 8259.627 v-8062.0234 8256.7295 -8055.0781 8258.0342 v-8048.1357 8259.3389 -8031.6685 8263 -8036.8252 8257.4033 C-8040.0791 8256.0742 -8041.7061 8255.3457 -8044.96 8253.6826 Cf0.055556 0.84 1 0.17 k-8035.9961 8258.5361 m-8038.1016 8256.832 -8048.7441 8255.9785 -8047.4082 8252.04 c-8046.0723 8248.1025 -8043.4971 8246.5674 Y-8041.6094 8246.5576 -8040.6665 8246.5313 -8038.7773 8246.4258 C-8036.7656 8255.9189 -8035.9961 8258.5361 Vf0.05 0.7 0.9 0 k-8043.6641 8239.8223 m-8045.1621 8246.3965 -8045.9102 8247.6289 -8047.4082 8252.04 C-8045.4229 8246.7246 -8038.9844 8249.9238 v-8032.1191 8253.334 -8010.1914 8249.5215 -8024.6309 8239.7754 C-8032.2441 8240.5049 -8036.0508 8240.6289 -8043.6641 8239.8223 Cf0.055556 0.84 1 0.17 k-8047.9395 8221.5518 m-8045.7524 8222.7129 -8047.9355 8226.4229 v-8054.7813 8238.0479 -8053.6582 8244.9824 -8046.4814 8243.7471 c-8039.3047 8242.5117 -8024.1719 8239.25 -8020.8955 8243.0557 C-8022.9912 8234.4805 -8025.0435 8229.7432 -8027.1387 8219.8789 C-8044.4814 8214.1953 -8047.9395 8221.5518 vf0.05 0.7 0.9 0 k-7889.0723 8247.8945 m-7877.0664 8247.8545 -7871.6094 8253.168 v-7876.3701 8250.9375 -7880.5381 8251.4902 v-7871.4121 8255.4326 -7869.0332 8259.9932 v-7872.0059 8256.6914 -7878.9512 8256.374 v-7885.8965 8256.0566 -7902.3652 8258.2891 -7897.2061 8250.9307 C-7893.9531 8249.6074 -7892.3252 8248.9893 -7889.0723 8247.8945 Cf0.055556 0.84 1 0.17 k-7898.0332 8252.502 m-7895.9307 8250.2559 -7885.2852 8252.1045 -7886.6221 8246.6709 c-7887.9595 8241.2373 -7890.5313 8238.2891 Y-7892.6274 8237.2666 -7893.6758 8236.7637 -7895.7715 8235.79 C-7897.2666 8248.5918 -7898.0332 8252.502 Vf0.05 0.7 0.9 0 k-7890.3633 8231.5 m-7888.8662 8237.5098 -7888.1191 8240.585 -7886.6221 8246.6709 C-7888.6523 8238.7314 -7895.0449 8240.9609 v-7904.6563 8244.3135 -7922.0996 8236.2891 -7909.3984 8227.8398 C-7901.7852 8228.7402 -7897.9766 8229.4609 -7890.3633 8231.5 Cf0.055556 0.84 1 0.17 k-7886.0938 8220.4844 m-7888.0264 8220.1357 -7886.0957 8223.2529 v-7879.3496 8234.1426 -7882.9688 8239.667 -7890.1445 8234.7422 c-7897.3203 8229.8154 -7910.2949 8229.0723 -7913.5713 8232.3662 C-7911.1289 8224.4092 -7909.3359 8220.8945 -7906.8926 8216.1504 C-7889.5527 8215.3164 -7886.0938 8220.4844 vfu0.05 0.7 0.9 0 k-7901.4277 8221.6777 m-7915.8345 8222.3369 -7930.0845 8226.7295 -7943.8652 8230.9766 c-7959.4668 8235.7842 -7974.2051 8240.3262 -7989.1953 8239.9697 c-7994.2734 8239.8496 -8003.0762 8237.8438 -8012.3955 8235.7197 c-8029.1255 8231.9063 -8041.4551 8229.4072 -8048.5449 8230.8008 C-8049.6865 8230.9434 -8051.4863 8231.4102 V-8051.7852 8234.5225 -8052.2598 8236.5469 Y-8048.8242 8226.6113 -8004.5723 8242.4863 -7989.2637 8242.8496 c-7959.9629 8243.5449 -7931.0166 8225.917 -7901.2959 8224.5537 c-7884.2471 8223.7734 -7882.2988 8233.0625 Y-7882.8262 8230.4072 -7883.4404 8226.877 V-7885.3857 8225.167 -7886.8164 8224.1758 Y-7890.0762 8222.5244 -7894.7383 8221.3711 -7901.4277 8221.6777 cf-8032.8848 8203.3857 m-8019.8828 8204.6729 -8006.5156 8207.8896 -7999.6255 8211.3887 c-7982.3325 8220.1729 -7963.5723 8217.583 -7947.5039 8213.8906 C-7944.3438 8213.1602 L-7929.0684 8209.6074 -7898.6387 8202.5322 -7886.6074 8208.1514 C-7885.5615 8208.4521 -7883.9824 8209.4941 V-7882.5977 8208.3037 -7880.7383 8208.9473 -7881.8906 8207.8584 c-7892.8496 8197.4873 -7931.0234 8207.1514 -7948.1484 8211.085 c-7964.8721 8214.9258 -7982.4111 8216.9023 -7998.3213 8208.8213 c-8013.3535 8201.1865 -8054.4902 8195.9229 -8058.9609 8204.0117 c-8059.2578 8204.5488 -8058.5547 8204.6475 -8057.4473 8205.6074 C-8055.9785 8204.7324 -8054.71 8204.2754 Y-8051.6895 8203.0869 -8044.7485 8202.2119 -8032.8848 8203.3857 cf0.02 0.28 0.72 0 k-7883.9824 8209.4941 m-7885.5615 8208.4521 -7886.6074 8208.1514 Y-7898.6387 8202.5322 -7929.0684 8209.6074 -7944.3438 8213.1602 C-7947.5039 8213.8906 L-7963.5723 8217.583 -7982.3325 8220.1729 -7999.6255 8211.3887 c-8006.5156 8207.8896 -8019.8828 8204.6729 -8032.8848 8203.3857 c-8044.7485 8202.2119 -8051.6895 8203.0869 -8054.71 8204.2754 C-8055.9785 8204.7324 -8057.4473 8205.6074 V-8055.8018 8207.0322 -8053.2598 8210.3594 -8051.7524 8219.8594 c-8051.0684 8224.1738 -8051.1904 8228.3262 -8051.4863 8231.4102 C-8049.6865 8230.9434 -8048.5449 8230.8008 Y-8041.4551 8229.4072 -8029.1255 8231.9063 -8012.3955 8235.7197 c-8003.0762 8237.8438 -7994.2734 8239.8496 -7989.1953 8239.9697 c-7974.2051 8240.3262 -7959.4668 8235.7842 -7943.8652 8230.9766 c-7930.0845 8226.7295 -7915.8345 8222.3369 -7901.4277 8221.6777 c-7894.7383 8221.3711 -7890.0762 8222.5244 -7886.8164 8224.1758 C-7885.3857 8225.167 -7883.4404 8226.877 V-7884.1328 8222.8984 -7884.9385 8217.8086 -7885.2256 8214.1563 c-7885.4346 8211.5049 -7884.7891 8210.1885 -7883.9824 8209.4941 CfUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 2)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8065 8263 m-8039.1089 8263 L-8039.1089 8237.1602 L-8065 8237.1602 L-8065 8263 Ln*u0 O0.62 0.04 0.93 0 k-8039.4077 8241.3809 m-8039.2969 8241.2969 -8039.1973 8241.2061 -8039.1089 8241.1084 C-8039.1089 8238.3887 L-8039.7085 8237.6465 -8040.7285 8237.1602 -8041.5703 8237.1602 c-8042.1948 8237.1602 -8042.8989 8237.5254 -8043.1328 8237.8135 C-8043.2632 8237.9424 -8043.4199 8237.9941 -8043.5752 8237.9941 c-8043.7329 8237.9941 -8043.8613 8237.9424 -8043.9141 8237.8369 c-8044.0957 8237.4473 -8044.4351 8237.1865 -8044.9048 8237.1865 c-8045.6592 8237.1865 -8048.5239 8239.8682 -8048.5239 8240.625 c-8048.5239 8240.7549 -8048.4199 8240.8076 -8048.2373 8240.8076 c-8048.0029 8240.8076 -8047.6128 8240.7031 -8047.2476 8240.5215 C-8047.0132 8240.418 -8045.9199 8239.6094 -8045.6328 8239.6094 c-8045.2949 8239.6094 -8045.0605 8240.418 -8044.7207 8240.418 c-8044.4351 8240.418 -8043.3408 8239.4277 -8043.0796 8239.2441 c-8042.8452 8239.0879 -8042.0908 8238.334 -8041.4399 8238.334 c-8040.5288 8238.334 -8039.6157 8238.8262 -8039.6157 8239.8174 c-8039.6157 8240.3389 -8040.4238 8241.875 -8043.2632 8242.3701 c-8043.5239 8242.4209 -8044.8765 8242.3975 -8045.1895 8242.4209 c-8045.5029 8242.4473 -8047.0391 8241.9785 -8047.3789 8241.9014 c-8048.4199 8241.667 -8048.4985 8241.667 -8050.4512 8241.667 c-8050.5825 8241.667 -8050.6606 8241.667 -8050.6606 8241.5879 c-8050.6606 8241.5361 -8050.6333 8241.458 -8050.5557 8241.3535 C-8050.2949 8240.9639 -8050.0605 8240.4434 -8050.0605 8239.8438 c-8050.0605 8238.5146 -8051.4155 8237.1602 -8052.9263 8237.1602 c-8055.8428 8237.1602 -8055.8428 8238.8799 -8055.8428 8239.1143 c-8055.8428 8239.6621 -8055.5039 8240.7813 -8054.2549 8240.7813 c-8053.5508 8240.7813 -8053.2637 8240.4434 -8053.2637 8240.1309 c-8053.2637 8239.8965 -8053.3945 8239.7129 -8053.5771 8239.6348 c-8053.8389 8239.5313 -8053.9419 8239.3994 -8053.9419 8239.2705 c-8053.9419 8239.0098 -8053.5771 8238.7754 -8053.1343 8238.7754 c-8052.3262 8238.7754 -8051.5708 8239.5566 -8051.5708 8240.209 c-8051.5708 8242.293 -8055.9209 8242.8926 -8056.1548 8242.8906 c-8058.0254 8242.8799 -8059.2549 8243.9229 -8059.2168 8245.9521 c-8059.1938 8247.3066 -8060.3892 8250.8496 -8062.2646 8250.8496 c-8062.8389 8250.8496 -8063.2813 8250.5117 -8063.2813 8249.8076 c-8063.2813 8249.1563 -8063.0991 8248.7129 -8062.8892 8248.7129 c-8062.7861 8248.7129 -8062.6548 8248.8701 -8062.5254 8249.1563 C-8062.4727 8249.3135 -8062.2915 8249.418 -8062.0825 8249.418 c-8061.6133 8249.418 -8061.0151 8249.002 -8061.0151 8247.8281 c-8061.0151 8246.6563 -8061.7183 8246.1885 -8062.4468 8246.1885 c-8063.7754 8246.1885 -8065 8247.3066 -8065 8249.6768 c-8065 8251.6309 -8063.75 8252.5674 -8062.6812 8252.5674 c-8061.6133 8252.5674 -8061.2495 8251.9688 -8060.8848 8251.6826 c-8060.7549 8251.5791 -8060.6758 8251.5273 -8060.6245 8251.5273 c-8060.5469 8251.5273 -8060.52 8251.6055 -8060.52 8251.7617 c-8060.52 8252.3857 -8060.0508 8255.1738 -8060.0508 8255.7461 c-8060.0508 8256.4746 -8060.0508 8262.4395 -8062.1089 8262.4395 c-8063.0728 8262.4395 -8063.5679 8261.6846 -8063.5679 8260.7979 c-8063.5679 8260.1465 -8062.6289 8259.2891 -8062.3169 8258.8447 c-8061.7959 8258.1426 -8061.7959 8257.6201 Y-8061.7959 8257.4648 -8061.8477 8257.3857 -8061.9517 8257.3613 C-8062.9678 8257.2305 -8063.1768 8257.1514 -8063.1768 8256.8662 c-8063.1768 8256.3975 -8062.4209 8255.5898 -8062.0303 8255.4082 c-8061.7437 8255.2773 -8061.6133 8254.9912 -8061.6133 8254.7041 c-8061.6133 8254.418 -8061.7437 8254.0801 -8062.1865 8254.0801 c-8063.2021 8254.0801 -8064.9229 8256.71 -8064.9229 8257.2041 c-8064.9229 8257.6738 -8064.6616 8258.0117 -8064.27 8258.1953 c-8064.1665 8258.2461 -8064.1143 8258.377 -8064.1143 8258.5322 c-8064.1143 8258.6895 -8064.1665 8258.8447 -8064.2969 8258.9756 C-8064.5835 8259.21 -8064.9468 8259.9141 -8064.9468 8260.5381 c-8064.9468 8261.3789 -8064.4604 8262.3994 -8063.7207 8263 C-8061.0439 8263 L-8060.9341 8262.9082 -8060.8301 8262.8076 -8060.7285 8262.7002 c-8060.4678 8262.4395 -8060.3125 8262.3359 -8060.1812 8262.3359 c-8060.0254 8262.3359 -8059.6089 8262.9346 -8059.4785 8262.9346 c-8058.8008 8262.9346 -8058.8008 8262.3877 -8058.8008 8261.1895 c-8058.8008 8261.0059 -8058.8535 8260.1738 -8058.8535 8260.0176 c-8058.8535 8259.7578 -8058.7754 8259.627 -8058.6445 8259.627 c-8058.5396 8259.627 -8058.4102 8259.7305 -8058.2788 8259.8877 c-8057.5078 8260.8438 -8056.0596 8262.2529 -8054.0928 8263 C-8048.5278 8263 L-8047.3564 8262.5391 -8046.4448 8261.7979 -8045.7349 8260.9287 C-8045.5425 8261.7793 -8044.9136 8262.998 -8042.9766 8262.998 c-8041.9438 8262.998 -8041.0239 8262.4492 -8040.6079 8261.6201 C-8039.6665 8261.2891 -8039.1108 8260.2793 -8039.1108 8259.1318 c-8039.1108 8257.1953 -8040.3301 8256.5664 -8041.1797 8256.373 C-8040.3096 8255.666 -8039.5693 8254.7529 -8039.1089 8253.582 C-8039.1089 8248.0156 L-8039.8564 8246.0488 -8041.2646 8244.6006 -8042.2207 8243.8281 c-8042.3774 8243.6982 -8042.4551 8243.5938 -8042.4551 8243.5146 c-8042.4551 8243.125 -8040.2148 8243.0986 -8039.7461 8243.0986 c-8039.4863 8243.0986 -8039.3564 8242.8652 -8039.3564 8242.6309 c-8039.3564 8242.4209 -8039.4336 8242.2402 -8039.6157 8242.2129 c-8039.8237 8242.1885 -8039.9551 8242.1357 -8039.9551 8242.0059 c-8039.9551 8241.875 -8039.7988 8241.6924 -8039.4077 8241.3809 cf1 D-8042.2988 8259.582 m-8042.23 8259.5693 -8042.1743 8259.5596 -8042.1421 8259.5596 c-8041.7783 8259.5596 -8041.2832 8259.9502 -8041.2832 8260.6543 c-8041.2832 8260.7109 -8041.2896 8260.7676 -8041.2998 8260.8242 C-8041.9854 8260.8105 -8042.3662 8260.3242 -8042.3662 8259.9648 c-8042.3662 8259.9023 -8042.3276 8259.7295 -8042.2988 8259.582 Cf-8039.9185 8259.1582 m-8039.9185 8259.5488 -8040.0835 8260.043 -8040.3872 8260.3916 C-8040.5181 8259.3594 -8041.4956 8258.7266 -8042.2471 8258.7266 c-8042.8208 8258.7266 -8043.1846 8258.9863 -8043.1846 8259.2734 c-8043.1846 8259.3066 -8043.1846 8259.3818 -8043.1509 8259.458 C-8043.1812 8259.5762 -8043.1992 8259.7119 -8043.1992 8259.8613 c-8043.1992 8260.5439 -8042.6772 8261.4121 -8041.8086 8261.666 C-8042.1445 8261.9766 -8042.5825 8262.1914 -8042.9502 8262.1914 c-8044.4077 8262.1914 -8044.9292 8261.1738 -8044.9292 8260.3418 c-8044.9292 8260.125 -8044.9209 8259.9375 -8044.8945 8259.7676 C-8044.4512 8259.1338 -8044.1064 8258.6543 -8043.8179 8258.293 C-8043.4541 8258.002 -8042.9736 8257.6582 -8042.3423 8257.2139 C-8042.1709 8257.1865 -8041.9849 8257.1777 -8041.7676 8257.1777 c-8040.9336 8257.1777 -8039.9185 8257.6992 -8039.9185 8259.1582 cf-8041.7261 8246.4072 m-8041.4141 8246.4072 -8039.6157 8247.6055 -8039.6157 8250.7568 c-8039.6157 8253.7227 -8041.3276 8256.6377 -8044.5757 8256.6934 C-8044.5781 8256.666 -8044.5796 8256.6357 -8044.5796 8256.6064 c-8044.5796 8256.4814 -8044.7769 8254.7598 -8045.8911 8253.3984 C-8045.8086 8253.4082 -8045.7236 8253.4141 -8045.6328 8253.4141 c-8044.5132 8253.4141 -8043.6274 8252.293 -8043.6274 8251.3037 c-8043.6274 8250.3145 -8044.4351 8248.6738 -8046.9092 8248.6738 c-8049.1797 8248.6738 -8050.2173 8250.5098 -8050.3564 8251.8359 C-8051.6064 8252.1465 -8053.0449 8253.1895 -8053.0449 8255.1992 c-8053.0449 8257.6738 -8051.4048 8258.4814 -8050.4141 8258.4814 c-8049.4238 8258.4814 -8048.3047 8257.5957 -8048.3047 8256.4746 c-8048.3047 8256.4053 -8048.3086 8256.3369 -8048.3145 8256.2734 C-8047.0869 8257.2129 -8045.7246 8257.5293 -8045.5029 8257.5293 c-8045.4751 8257.5293 -8045.4468 8257.5303 -8045.4199 8257.5322 C-8045.5645 8260.6709 -8048.1621 8262.4922 -8051.3516 8262.4922 c-8053.6436 8262.4922 -8056.3008 8261.0586 -8056.3008 8260.0693 c-8056.3008 8259.6533 -8055.5181 8259.5752 -8055.3628 8259.5752 c-8055.2588 8259.5752 -8054.6592 8259.7041 Y-8054.5293 8259.7041 -8054.4512 8259.6006 -8054.4512 8259.4697 c-8054.4512 8259.2354 -8055.0767 8258.2725 -8056.0132 8258.2725 c-8056.5352 8258.2725 -8057.2383 8258.2207 -8057.4727 8257.9336 c-8057.6289 8257.752 -8058.1499 8256.5791 -8058.1499 8256.3457 c-8058.1499 8256.2139 -8058.0708 8256.1367 -8057.9155 8256.1367 c-8057.7075 8256.1367 -8056.7949 8256.3184 -8056.6133 8256.3184 c-8055.2329 8256.3184 -8054.2168 8255.5117 -8054.2168 8254.0527 c-8054.2168 8253.8975 -8054.2432 8253.3242 -8054.4775 8253.3242 c-8054.6079 8253.3242 -8054.9727 8253.8711 -8055.1021 8253.8711 c-8055.2329 8253.8711 -8055.3101 8253.793 -8055.3101 8253.6621 c-8055.3101 8253.6367 -8055.2075 8252.9854 -8055.2075 8252.8809 c-8055.2075 8251.918 -8055.8325 8251.6055 -8056.0669 8251.6055 c-8056.5605 8251.6055 -8056.8213 8251.9951 -8056.8213 8252.5166 c-8056.8213 8252.6465 -8056.7949 8252.7773 -8056.7695 8252.9336 C-8056.6133 8253.6113 -8056.0669 8253.8711 -8056.0669 8254.418 c-8056.0669 8255.1738 -8057.0557 8255.4336 -8057.8115 8255.4336 c-8058.7231 8255.4336 -8059.2695 8253.8184 -8059.2695 8252.0986 c-8059.2695 8251.0703 -8058.8765 8249.5898 -8058.4009 8248.4229 c-8057.9727 8247.377 -8056.9492 8247.3984 -8056.5552 8247.3193 c-8056.5449 8247.3184 -8055.5605 8247.1162 -8055.2412 8246.8223 c-8054.8276 8246.4395 -8054.6992 8245.6191 -8054.6982 8245.6074 c-8054.6621 8245.252 -8054.6807 8244.1016 -8053.5845 8243.666 c-8052.4326 8243.209 -8051.0088 8242.8389 -8050.0088 8242.8389 c-8048.2896 8242.8389 -8046.6748 8243.3857 -8046.6748 8244.2969 c-8046.6748 8245.0527 -8046.9355 8245.6777 -8047.6909 8245.6777 c-8048.2373 8245.6777 -8048.4985 8245.1309 -8049.1758 8244.9746 C-8049.3325 8244.9482 -8049.4629 8244.9229 -8049.5918 8244.9229 c-8050.1133 8244.9229 -8050.5039 8245.1836 -8050.5039 8245.6777 c-8050.5039 8245.9121 -8050.1919 8246.5361 -8049.2285 8246.5361 c-8049.1235 8246.5361 -8048.4717 8246.4336 -8048.4453 8246.4336 c-8048.3154 8246.4336 -8048.2373 8246.5117 -8048.2373 8246.6416 c-8048.2373 8246.7725 -8048.7837 8247.1357 -8048.7837 8247.2666 c-8048.7837 8247.502 -8048.2109 8247.5273 -8048.0552 8247.5273 c-8047.0918 8247.5273 -8045.7896 8246.9023 -8045.7896 8245.4434 c-8045.7896 8245.2607 -8045.9717 8244.4014 -8045.9717 8244.1934 c-8045.9717 8244.0361 -8045.8936 8243.959 -8045.7637 8243.959 c-8045.0332 8243.959 -8043.8096 8244.6621 -8043.8096 8246.2246 c-8043.8096 8246.9541 -8042.9502 8247.6572 -8042.6108 8247.6572 c-8042.4028 8247.6572 -8041.9604 8246.4072 -8041.7261 8246.4072 cf-8050.3271 8252.8682 m-8050.2246 8253.6641 -8049.9595 8254.334 -8049.6016 8254.8926 C-8049.6357 8254.8887 -8049.6636 8254.8857 -8049.6846 8254.8857 c-8050.0493 8254.8857 -8050.4668 8255.043 -8050.7012 8255.2773 C-8050.9355 8255.4854 -8051.1436 8255.5898 -8051.3262 8255.5898 c-8051.5869 8255.5898 -8051.8472 8255.3301 -8051.8472 8254.7305 c-8051.8472 8253.625 -8051.0615 8253.1016 -8050.3271 8252.8682 Cf-8046.8311 8250.9648 m-8047.1172 8251.0693 -8047.2476 8251.5117 -8047.2476 8251.9023 c-8047.2476 8252.0059 -8047.23 8252.1504 -8047.1836 8252.3086 C-8047.7646 8251.9873 -8048.4727 8251.7754 -8049.3354 8251.7402 C-8049.1729 8250.9453 -8048.6836 8249.8447 -8047.2739 8249.8447 c-8046.4409 8249.8447 -8046.3101 8250.4697 -8046.3101 8250.5479 c-8046.3101 8250.7305 -8046.4927 8250.8613 -8046.8311 8250.9648 Cf-8049.3936 8252.7002 m-8049.3589 8252.6992 -8049.3247 8252.6992 -8049.2949 8252.6992 c-8047.5078 8252.6992 -8045.7461 8254.3975 -8045.4556 8256.6182 C-8047.5215 8256.2266 -8049.2188 8254.3623 -8049.3936 8252.7002 Cf*UU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 D0 J 0 j 1 w 4 M []0 d0 XR-8064.8833 8262.9551 m-7973.0479 8262.9551 L-7973.0479 8258.6758 L-8064.8833 8258.6758 L-8064.8833 8262.9551 Ln0 O0 0 0 1 k-8064.6631 8260.2754 m-8065 8260.3418 -8064.4814 8260.5313 -8064.8833 8260.3887 C-8064.8379 8260.2705 -8064.7725 8260.1816 -8064.6631 8260.2754 Cf-7974.1675 8260.4414 m-7975.2524 8261.2041 -7976.6816 8260.4336 -7977.8701 8260.9199 C-7978.0098 8260.9521 -7977.8345 8260.502 -7978.1484 8260.6025 C-7979.3008 8261.1953 -7981.1162 8260.8418 -7982.5195 8260.3848 C-7982.4346 8260.2666 L-7982.7017 8260.1816 -7983.0283 8260.5723 -7983.3115 8260.5176 C-7983.3135 8260.4395 -7983.2207 8260.4063 -7983.2861 8260.2988 C-7983.3574 8260.5352 -7983.7983 8260.4082 -7983.9185 8260.584 C-7984.0303 8260.4922 -7984.0195 8260.3047 -7984.1641 8260.2012 C-7984.3262 8260.4697 L-7984.7769 8261.1094 -7985.4209 8260.4258 -7986.0361 8260.7559 C-7986.0063 8260.6934 -7985.9453 8260.6445 -7985.9941 8260.584 C-7986.9814 8260.9727 -7988.2168 8260.9004 -7989.3208 8261.043 C-7989.2769 8260.9482 -7989.2363 8260.7754 -7989.3008 8260.668 C-7989.3555 8260.9512 -7989.6963 8261.0225 -7989.9922 8261.0781 C-7990.1255 8260.7871 -7990.4995 8261.3438 -7990.8467 8261.1836 C-7990.8169 8261.1191 L-7991.0732 8261.4238 -7991.1973 8260.9434 -7991.4053 8261.3086 C-7991.5684 8261.0801 L-7991.6807 8261.4902 -7991.9395 8260.8672 -7992.1514 8261.0762 C-7992.1445 8261.1602 L-7992.3442 8261.2598 -7992.4482 8261.0537 -7992.6338 8261.123 C-7992.6514 8261.0762 L-7993.0854 8261.1836 -7993.3379 8260.9551 -7993.3271 8261.2754 C-7993.4795 8261.0186 -7992.9063 8261.1582 -7993.1455 8260.7852 C-7994.5732 8261.1152 -7996.0459 8261.0508 -7997.4834 8261.0566 C-7997.6465 8260.9277 -7997.7505 8260.8887 -7997.7871 8260.7676 C-7997.9307 8260.832 -7998.3281 8260.8262 -7998.4585 8260.9902 C-7998.4102 8260.9834 -7998.5513 8260.8262 -7998.6274 8260.8105 C-7998.8887 8260.6895 -7998.9131 8261.1621 -7999.2002 8261.0186 C-7999.0859 8260.9336 -7999.0469 8260.8301 -7999.0854 8260.7109 C-7999.3301 8260.9609 -7999.6577 8260.9209 -7999.9473 8261.002 C-7999.9023 8260.9482 -7999.8325 8260.916 -7999.8433 8260.8154 C-8000.1602 8261.0986 -8000.4209 8260.7559 -8000.6982 8260.9346 C-8000.5947 8260.75 L-8001.0415 8260.5254 -8000.7266 8261.1367 -8001.1128 8261.0039 C-8001.02 8260.9453 -8001.0527 8260.873 -8001.0361 8260.7979 C-8001.3965 8261.1338 -8001.9795 8261.0225 -8002.3389 8261.1367 C-8002.3174 8261.1113 -8002.3232 8261.0605 Y-8002.7148 8261.1025 -8003.1245 8260.998 -8003.5552 8261.1445 C-8003.7119 8261.0625 -8003.5039 8260.6934 -8003.9185 8260.7617 C-8003.9033 8261.1328 -8004.6221 8260.9141 -8004.3779 8261.334 C-8004.7319 8261.2734 -8005.2925 8261.1338 -8005.5283 8261.2598 C-8005.3691 8261.1191 -8005.7007 8260.8066 -8005.4063 8260.7754 C-8005.6289 8260.5498 L-8005.5957 8260.3984 -8005.3999 8260.6016 -8005.4707 8260.4102 C-8005.6182 8260.4258 -8006.0479 8260.5723 -8006.1797 8260.5117 C-8006.4531 8260.7393 -8006.7041 8261.1641 -8007.1465 8261.2109 C-8006.9385 8261.0664 -8007.2646 8260.8018 -8007.1235 8260.7383 C-8007.7407 8261.4492 L-8007.8877 8261.4668 -8007.7725 8261.1563 -8007.9854 8261.2529 C-8007.9746 8261.3516 -8008.0674 8261.4121 -8008.1318 8261.4922 C-8008.1875 8261.4492 -8008.7441 8261.584 -8008.8081 8261.2188 C-8008.8735 8261.0762 -8008.5684 8261.1426 -8008.7314 8261.0117 C-8009.0029 8261.0156 -8009.0151 8261.1406 -8009.2871 8261.1465 C-8009.2925 8261.0977 L-8009.4717 8261.043 -8009.8213 8261.2529 -8009.6265 8261.4551 C-8009.5015 8261.4668 -8009.6738 8261.2354 -8009.4888 8261.3418 C-8009.6152 8261.5537 -8009.9312 8261.6133 -8010.2031 8261.6172 C-8010.1104 8261.5586 -8010.1216 8261.4609 -8010.0845 8261.3574 C-8010.4497 8261.6445 -8010.8369 8261.7354 -8011.2451 8261.8555 C-8011.2515 8262.0293 -8011.0928 8261.5391 -8011.0327 8261.6309 C-8011.5557 8261.3896 -8012.1128 8261.9727 -8012.5479 8261.6201 C-8012.4766 8261.5898 -8012.5098 8261.8672 -8012.5146 8261.8184 C-8012.7666 8261.7969 -8012.7549 8261.5449 -8012.9189 8261.6377 C-8012.9355 8261.4902 -8013.1255 8261.6855 -8013.2944 8261.7305 C-8013.3818 8261.8369 -8013.3384 8261.6582 -8013.1914 8261.6426 C-8013.4268 8261.7676 -8014.3691 8261.9941 -8014.9131 8261.7793 C-8014.9023 8261.877 -8015.2471 8262.1377 -8015.3721 8262.127 C-8015.3232 8261.8984 L-8015.4375 8261.7617 -8015.7422 8261.918 -8015.7632 8261.7227 C-8016.0303 8262 -8014.7344 8261.4863 -8015.0957 8261.7002 C-8015.1895 8261.5098 -8015.5991 8262.0645 -8015.5215 8261.7529 C-8015.7725 8261.7617 -8016.0161 8262.0186 -8016.2559 8261.8047 C-8016.1865 8261.8418 -8016.0522 8261.4873 -8016.2549 8261.5039 C-8016.6123 8261.5449 -8016.3564 8261.6133 -8016.6465 8261.6895 C-8016.8281 8261.7832 L-8016.8398 8262.0059 -8017.1475 8261.7529 -8017.0146 8262.002 C-8017.0586 8261.8184 -8017.5337 8262.1152 -8017.4971 8261.7461 C-8017.4473 8261.4551 L-8017.6016 8261.4766 -8017.7002 8261.7617 -8017.8213 8261.8896 C-8017.8418 8261.8633 -8017.8823 8261.8047 -8017.8745 8261.7578 C-8017.8994 8262.2031 -8018.2432 8261.7207 -8018.4268 8262.0645 C-8018.7505 8261.9102 -8019.2495 8262.0508 -8019.4023 8261.7734 C-8019.6514 8261.9082 -8019.8784 8262.0684 -8020.1621 8261.9727 C-8020.1055 8261.9307 -8020.0283 8261.918 -8020.0122 8261.8223 C-8020.1904 8261.6914 -8020.2344 8261.8086 -8020.3975 8261.8809 C-8020.3608 8261.8145 -8020.7539 8261.6201 -8020.9521 8261.4629 C-8021.1992 8261.5957 -8021.1143 8261.8359 -8021.1392 8261.9824 C-8021.3652 8261.543 -8021.8379 8262.2656 -8022.1211 8261.8672 C-8022.0352 8261.8066 -8021.7598 8261.6514 -8021.9658 8261.541 C-8022.1919 8261.1025 -8022.4219 8261.8652 -8022.7861 8261.6543 C-8022.6968 8262.0186 L-8022.8594 8261.793 -8023.2334 8262.2305 -8023.1963 8261.8594 C-8023.3184 8261.9902 -8023.6265 8261.7383 -8023.5859 8262.0938 C-8024.1846 8261.793 -8025.0425 8262.2754 -8025.4102 8261.6377 C-8025.4961 8261.6973 -8025.7104 8261.6367 -8025.6665 8261.8193 C-8025.5239 8262.0176 -8025.4673 8261.6777 -8025.4141 8261.8125 C-8025.4912 8261.8232 -8025.5078 8261.9209 -8025.5161 8261.9697 C-8025.7021 8261.8887 -8025.8486 8261.8633 -8025.6729 8261.5674 C-8026.0869 8261.3477 -8026.1001 8262.1719 -8026.6274 8262.0332 C-8026.6035 8261.8857 -8026.6436 8261.8301 -8026.7979 8261.8535 C-8027.0903 8262.1055 L-8027.4312 8262.0469 -8027.2842 8261.7705 -8027.2925 8261.5215 C-8027.4746 8261.5645 -8027.6973 8261.5527 -8027.7803 8261.7383 C-8028.0015 8261.4258 L-8027.8398 8261.6514 -8028.1514 8261.5762 -8028.2368 8261.6367 C-8028.1514 8261.5762 L-8028.1846 8261.4697 -8028.3955 8261.5352 -8028.5024 8261.5664 C-8028.4766 8261.7207 -8028.2617 8261.7832 -8028.1445 8261.8281 C-8028.2373 8261.9375 -8028.3823 8261.9121 -8028.5059 8262.041 C-8028.4648 8261.7969 -8028.8027 8261.8672 -8028.9473 8261.8418 C-8029.1133 8261.7891 -8029.1348 8262.0605 -8029.1831 8262.0527 C-8029.1875 8261.9258 -8029.4541 8262.0313 -8029.3247 8261.8535 C-8029.2681 8261.8125 -8029.1953 8261.9766 -8029.1016 8261.8652 C-8029.2109 8261.7705 -8029.1982 8261.5498 -8029.4258 8261.7109 C-8029.5967 8261.832 -8029.3818 8262.1934 -8029.7061 8262.0391 C-8029.6211 8261.9785 -8029.6055 8261.8809 -8029.5391 8261.793 C-8029.8433 8261.666 L-8029.8564 8261.8887 L-8029.8975 8261.832 -8029.8691 8261.8125 -8029.8877 8261.7832 C-8029.9785 8262.0176 -8030.3521 8261.8555 -8030.4209 8262.1191 C-8030.5742 8262.1426 -8030.7441 8261.9648 -8030.8906 8261.9395 C-8030.8623 8261.9199 L-8031.0415 8261.7891 -8031.2793 8261.875 -8031.4297 8262.0254 C-8031.4219 8261.9766 L-8031.5195 8261.959 -8031.7505 8261.9941 -8031.8735 8262.125 C-8032.1201 8261.957 -8031.9561 8261.2842 -8032.2295 8261.5645 C-8032.48 8261.5723 -8032.6221 8261.9727 -8032.5215 8262.1152 C-8032.9717 8261.9648 -8033.4834 8262.3281 -8033.9009 8261.9824 C-8033.9658 8262.0723 -8033.9248 8262.1289 -8034.0586 8262.1816 C-8034.7197 8262.0938 -8035.4551 8262.4453 -8035.9814 8262.0078 C-8035.79 8261.9141 -8035.9688 8261.7852 -8035.9727 8261.6582 C-8036.1309 8261.8574 -8036.1631 8261.4512 -8036.2197 8261.793 C-8036.2041 8261.9941 -8036.2197 8262.0918 -8036.0337 8262.1729 C-8036.4282 8262.2813 -8037.0283 8262.2813 -8037.2471 8262.0938 C-8037.1377 8262.1865 -8037.2227 8262.248 -8037.3086 8262.3086 C-8037.2803 8261.9873 -8037.5713 8261.9395 -8037.7915 8262.0527 C-8037.8223 8262.248 L-8037.9658 8262.0469 L-8038.0503 8262.1094 -8038.0591 8262.457 -8038.2773 8262.2695 C-8038.2891 8262.1934 -8038.3018 8262.1162 -8038.3418 8262.0605 C-8038.5693 8262.2207 -8038.8906 8262.4922 -8039.1377 8262.3262 C-8039.3398 8262.041 L-8039.4453 8262.0723 -8039.6235 8262.2441 -8039.4375 8262.3262 C-8039.8594 8262.1543 -8040.1309 8262.1328 -8040.2646 8261.8857 C-8040.9912 8262.4873 -8042.0459 8262.5117 -8042.8906 8262.4688 C-8042.8652 8262.3223 L-8043.0923 8262.1855 -8042.9834 8262.5781 -8043.1416 8262.4766 C-8043.0684 8262.3369 -8043.3145 8262.1729 -8043.1362 8262.002 C-8043.4609 8261.8477 -8043.5547 8262.2559 -8043.7656 8262.3223 C-8043.7979 8262.5146 -8043.5957 8262.1992 -8043.6367 8262.4434 C-8043.6729 8262.5117 -8044.0859 8262.293 -8044.1362 8262.584 C-8044.2178 8262.4697 -8044.1543 8262.2559 -8044.1104 8262.1377 C-8044.3086 8262.2793 L-8044.5513 8261.9395 -8043.7559 8261.6719 -8044.0107 8261.2529 C-8044.1934 8261.2988 L-8044.3682 8260.9941 -8043.71 8260.9551 -8044.1689 8260.8506 C-8044.3682 8260.9941 -8044.5381 8261.416 -8044.3608 8261.5449 C-8044.7754 8261.625 -8044.5527 8262.2383 -8044.9985 8262.2139 C-8045.1201 8262.043 -8044.6416 8262.1729 -8044.7275 8261.9336 C-8044.9375 8261.6992 -8045.1484 8262.0645 -8045.3354 8261.9824 C-8045.1279 8262.0918 -8045.3032 8262.3857 -8045.4375 8262.4395 C-8045.6641 8262.3018 -8045.29 8262.1641 -8045.6113 8262.1338 C-8045.6641 8262.3018 -8045.9595 8262.4277 -8045.7041 8262.5449 C-8045.8203 8262.9258 -8046.0381 8262.4395 -8046.2129 8262.7344 C-8046.3174 8262.4668 -8045.8823 8262.1152 -8046.2354 8261.9814 C-8046.1792 8262.2393 -8046.6704 8262.332 -8046.4839 8262.7148 C-8046.6221 8262.6406 -8046.6367 8262.4375 -8046.5361 8262.2793 C-8046.7334 8262.1201 -8047.0151 8262.75 -8047.0801 8262.2383 C-8047.1479 8262.502 L-8047.21 8262.416 -8047.2983 8262.3516 -8047.3994 8262.209 C-8047.5732 8262.2041 -8047.96 8262.5664 -8047.9443 8262.168 C-8048 8262.209 -8048.3975 8262.1914 -8048.2441 8262.4668 C-8047.9971 8262.6348 -8047.96 8262.2656 -8047.8223 8262.6377 C-8047.9971 8262.334 -8048.1787 8262.6777 -8048.3213 8262.7793 C-8048.3447 8262.625 L-8048.4297 8262.6855 -8048.6255 8262.6514 -8048.6787 8262.8184 C-8048.6133 8262.7305 -8048.6475 8262.625 -8048.7148 8262.5879 C-8048.8042 8262.8223 L-8049.1494 8262.9395 -8048.8857 8262.4102 -8049.2217 8262.4785 C-8048.9663 8262.2969 L-8049.0225 8262.3359 -8049.1367 8262.1162 -8049.2979 8262.1895 C-8049.3604 8262.4033 -8049.4775 8262.6602 -8049.5313 8262.8262 C-8049.7207 8262.9199 -8049.6162 8262.585 -8049.8027 8262.8047 C-8049.5586 8262.5469 L-8049.5215 8262.4766 -8049.7231 8262.1934 -8049.9761 8262.1992 C-8050.1377 8262.2734 -8050.3887 8262.582 -8050.1338 8262.6992 C-8050.2607 8262.7031 -8050.4385 8262.5723 -8050.3379 8262.416 C-8050.6255 8262.4902 -8050.2998 8262.6465 -8050.5479 8262.7793 C-8050.6494 8262.6367 -8050.9658 8262.4336 -8051.1563 8262.2266 C-8050.8975 8261.8682 L-8051.0693 8261.8652 L-8050.8467 8261.5781 -8051.1826 8261.6465 -8051.0566 8261.3438 C-8051.1743 8261.2969 -8051.3169 8261.3994 -8051.4307 8261.4785 C-8051.0864 8261.9629 -8051.8159 8262.1406 -8051.7158 8262.582 C-8052.1875 8262.7031 -8052.0107 8261.5078 -8052.5024 8262.1992 C-8052.4219 8262.3145 -8052.6533 8262.6504 -8052.3564 8262.5225 C-8052.6494 8262.4746 -8052.5557 8262.9658 -8052.9014 8262.7832 C-8052.6455 8262.6016 -8053.1763 8262.3359 -8052.8066 8262.0723 C-8052.8311 8262.2188 -8052.6001 8262.1836 -8052.5435 8262.1426 C-8052.6641 8261.9727 -8052.5186 8261.6973 -8052.8184 8261.6973 C-8053.0015 8261.7393 -8053.2524 8261.748 -8053.2158 8261.9785 C-8053.2085 8262.2314 -8052.9365 8261.9512 -8053.0537 8262.207 C-8053.4185 8262.2949 -8053.4795 8261.9102 -8053.6304 8262.3594 C-8053.3999 8262.3232 -8053.3423 8262.584 -8053.3467 8262.7578 C-8053.6143 8262.8633 L-8053.5625 8262.6953 L-8053.9922 8262.5742 -8053.6895 8263 -8054.1055 8262.9551 C-8054.3008 8262.623 L-8054.2017 8262.3369 -8053.6953 8262.75 -8053.7695 8262.2842 C-8054.04 8262.2656 -8054.1299 8262.502 -8054.3848 8262.3818 C-8054.3281 8262.3418 -8054.2505 8262.3301 -8054.1943 8262.2891 C-8054.2915 8262.2734 -8054.3877 8261.6563 -8054.7734 8262.0176 C-8054.9727 8262.1582 -8054.8262 8262.1836 -8054.8311 8262.3574 C-8055.2656 8262.4102 -8055.3955 8262.5879 -8055.6753 8262.6152 C-8055.6177 8262.2754 -8056.1699 8262.582 -8055.8608 8262.2344 C-8055.7188 8262.4336 -8055.0903 8262.4141 -8054.9365 8262.0898 C-8055.0947 8261.6865 -8054.5952 8262.1465 -8054.5024 8261.7383 C-8054.8506 8261.7285 -8054.8335 8261.332 -8054.8896 8261.0723 C-8054.9863 8261.0537 -8055.0801 8261.1641 -8055.1377 8261.2041 C-8055.1787 8261.4492 -8055.0522 8261.4453 -8055.0449 8261.6973 C-8055.4336 8261.6309 -8055.8081 8261.7676 -8056.0225 8262.0059 C-8056.1523 8261.8848 -8056.1113 8261.6406 -8055.9575 8261.6172 C-8056.4199 8261.6895 -8056.9141 8261.6563 -8057.3535 8261.582 C-8057.0693 8261.9814 -8057.8433 8261.6758 -8057.6494 8262.0078 C-8057.4141 8262.0977 -8057.2119 8262.3818 -8057.3418 8262.5605 C-8057.4888 8262.5352 -8057.3369 8262.3857 -8057.3984 8262.3008 C-8057.5859 8262.5186 -8057.6895 8261.9512 -8057.8735 8262.2949 C-8057.4512 8262.166 -8057.7915 8261.8086 -8057.7139 8261.4961 C-8058.0186 8261.6719 -8057.7007 8261.2734 -8058.0024 8261.2734 C-8058.3057 8261.4473 -8058.6787 8261.584 -8059.0161 8261.6514 C-8059.4399 8261.3555 -8060.0898 8261.6465 -8060.4683 8261.6582 C-8060.6665 8261.5 -8060.5322 8261.1465 -8060.7471 8261.085 C-8060.9995 8261.0918 -8060.5601 8261.4668 -8060.9336 8261.3047 C-8060.8975 8261.2344 L-8061.0107 8261.3164 -8061.5825 8260.9941 -8061.6929 8261.502 C-8061.5776 8261.1191 L-8061.6475 8261.084 -8061.7119 8261.1719 -8061.7695 8261.2129 C-8061.7725 8261.0879 -8061.8535 8260.9746 -8061.7402 8260.8926 C-8061.9707 8260.6289 -8062.2241 8260.9346 -8062.4746 8260.9453 C-8062.3135 8261.1719 L-8062.7422 8261.3496 -8063.0293 8261.125 -8063.4443 8261.2041 C-8063.4316 8260.9824 L-8063.6787 8261.1152 L-8063.6182 8260.9004 -8063.8447 8260.7617 -8063.9751 8260.9414 C-8063.3335 8260.3984 L-8063.1553 8260.5293 -8063.5283 8260.666 -8063.4165 8260.8848 C-8063.3213 8261.0762 -8062.9375 8261.0156 -8062.8755 8260.8018 C-8063.0225 8260.7773 -8063.0293 8260.8262 -8063.1436 8260.9063 C-8063.1919 8260.5977 -8062.9688 8260.6094 -8062.8584 8260.4033 C-8062.9355 8260.416 -8063.0449 8260.3223 -8063.0615 8260.4199 C-8062.9102 8260.2695 -8062.7578 8260.2461 -8062.5059 8260.2383 C-8062.6763 8260.3594 -8062.4131 8260.4297 -8062.4775 8260.5176 C-8062.4575 8260.2461 -8062.2168 8260.1621 -8061.9053 8260.2383 C-8061.6831 8260.5527 -8061.3208 8260.0361 -8060.96 8260.123 C-8061.1064 8260.3984 -8061.2935 8260.6191 -8061.5127 8260.7305 C-8061.2861 8260.8682 -8061.2607 8260.7227 -8061.0337 8260.8613 C-8060.9238 8260.6563 -8060.8457 8260.3418 -8060.5503 8260.2168 C-8060.5342 8260.4199 L-8060.2666 8260.3164 -8060.2666 8260.0156 -8059.9258 8260.0723 C-8059.3418 8260.1719 -8058.7407 8260.1719 -8058.2949 8260.1973 C-8058.2783 8260.3994 L-8058.0303 8259.9658 -8057.4521 8260.2393 -8057.1182 8260.0469 C-8056.5503 8260.2422 -8055.8848 8259.8535 -8055.5938 8260.2031 C-8054.5913 8260.0469 -8053.7148 8259.8945 -8052.6768 8259.9688 C-8052.8516 8260.2637 L-8052.6655 8260.0469 -8052.7305 8260.4336 -8052.5479 8260.3896 C-8052.7578 8260.1543 -8052.2949 8260.084 -8052.1665 8259.9033 C-8051.7041 8260.1328 -8051.1104 8259.8828 -8050.7007 8259.6758 C-8050.6846 8259.8789 L-8050.2705 8259.498 -8049.7759 8259.832 -8049.2598 8259.8945 C-8049.2007 8259.9785 -8049.1074 8260.1689 -8048.9536 8260.1465 C-8048.6738 8259.8184 -8048.5273 8259.8418 -8048.1167 8259.6367 C-8047.8169 8259.6367 -8047.3301 8259.7178 -8047.0254 8259.8457 C-8045.8975 8259.3848 -8044.7456 8259.6797 -8043.5732 8259.4023 C-8043.4888 8259.6406 L-8042.3521 8259.1309 -8040.9541 8259.5938 -8039.9839 8259.332 C-8040.0776 8259.7393 L-8039.7734 8259.8652 -8039.3843 8259.6328 -8039.4619 8259.3438 C-8039.1567 8259.4688 -8038.7007 8259.1465 -8038.5068 8259.4814 C-8038.1953 8259.5566 -8038.1255 8259.293 -8037.8662 8259.2383 C-8037.2422 8259.3926 -8037.0107 8259.3574 -8036.4224 8259.2813 C-8036.5684 8259.2559 L-8036.6328 8259.3457 -8036.6387 8259.5186 -8036.4922 8259.5449 C-8036.2725 8259.4316 -8035.6846 8259.6543 -8035.9033 8259.168 C-8035.2754 8259.4492 -8034.4385 8258.9395 -8033.8271 8259.3184 C-8033.8789 8259.1855 -8033.7246 8259.1602 -8033.6602 8259.0703 C-8033.1089 8259.0645 -8032.5293 8259.3359 -8032.0898 8259.1094 C-8032.0024 8259.1758 -8032.2295 8259.3359 -8032.0049 8259.3496 C-8031.8721 8259.2988 -8032.0024 8259.1758 -8031.8384 8259.1016 C-8030.9453 8258.8535 -8030.0303 8259.3574 -8029.2188 8259.293 C-8027.7754 8259.0361 -8026.2695 8259.166 -8024.8867 8259.123 C-8024.9023 8259.2207 L-8024.4395 8258.8477 -8023.8159 8259.6025 -8023.4463 8259.041 C-8023.3369 8259.1338 -8023.0283 8259.085 -8023.1094 8259.2734 C-8022.7407 8259.0098 -8022.0771 8259.5215 -8021.5439 8259.1865 C-8021.5928 8259.1777 -8021.6211 8259.1973 -8021.6777 8259.2393 C-8021.1392 8259.4551 -8020.6641 8259.1602 -8020.0957 8259.3555 C-8020.1533 8259.3975 -8020.2583 8259.4277 -8020.2754 8259.5254 C-8020.0557 8259.7129 -8019.7549 8259.1133 -8019.6348 8259.584 C-8019.5088 8259.5801 -8019.5449 8259.3477 -8019.6221 8259.3613 C-8018.3779 8259.5449 -8017.0498 8259.2441 -8015.7549 8259.1367 C-8014.8271 8259.418 -8015.6982 8259.9297 -8014.9663 8259.5781 C-8014.9063 8259.6689 -8014.9229 8259.3984 -8014.9131 8259.4961 C-8014.6299 8259.3643 -8014.4717 8260.0215 -8014.2754 8259.7754 C-8014.3564 8259.4863 -8014.1445 8259.6133 -8014.1387 8259.4375 C-8013.5713 8259.625 -8013.4575 8259.8857 -8013.0098 8259.666 C-8013.0435 8259.8184 L-8012.5186 8259.3887 -8011.9102 8259.6191 -8011.4673 8259.123 C-8008.5728 8259.0332 -8005.7983 8258.7578 -8002.9761 8258.7002 C-8000.1865 8258.7949 -7997.4551 8258.5723 -7994.6221 8258.8359 C-7993.9585 8259.2354 -7993.9087 8259.2246 -7993.1797 8259.0625 C-7993.2095 8259.127 -7993.2549 8259.1426 -7993.2061 8259.2031 C-7993.1699 8258.875 -7992.6929 8259.1719 -7992.6235 8258.8594 C-7991.5762 8258.9199 -7990.6113 8258.8301 -7989.5337 8258.8281 C-7989.7041 8258.8633 -7989.7896 8259.1309 -7989.5869 8259.1094 C-7989.3755 8258.9004 L-7989.3408 8258.9922 L-7989.2021 8258.9434 -7989.0513 8258.7813 -7989.1943 8258.6758 C-7986.4873 8258.3926 -7983.8242 8259.0508 -7981.1729 8258.9697 C-7980.5435 8259.1064 -7979.6475 8258.9814 -7978.9629 8258.9141 C-7976.9355 8259.3516 -7975.1079 8259.7041 -7973.0479 8259.3984 C-7973.3169 8260.2461 -7974.1675 8260.4414 Vf-8064.2578 8260.2422 m-8064.1855 8260.4063 -8063.9497 8260.4961 -8064.1377 8260.7148 C-8064.1611 8260.5605 -8064.2822 8260.3887 -8064.2578 8260.2422 Cf-8057.9619 8261.9297 m-8057.9536 8261.8809 -8057.8721 8261.9961 -8057.8521 8262.0225 C-8057.9297 8262.0352 -8058.0024 8262.1729 -8058.0645 8262.0879 C-8057.9854 8262.0762 -8057.9976 8261.998 -8057.9619 8261.9297 Cf-8056.3521 8262.0273 m-8056.3765 8262.1729 -8056.7207 8262.2891 -8056.9238 8262.3066 C-8056.3521 8262.0273 Lf-8054.8521 8262.6289 m-8054.7227 8262.752 -8054.7583 8262.8193 -8054.9326 8262.8154 C-8054.9453 8262.7383 -8054.8877 8262.6992 -8054.8521 8262.6289 Cf-8054.7456 8262.2969 m-8054.6211 8262.293 -8054.5591 8262.3789 -8054.4985 8262.4629 C-8054.5029 8262.3369 -8054.7871 8262.541 -8054.7456 8262.2969 Cf-8051.4893 8262.7207 m-8051.4111 8262.709 -8051.2417 8262.5879 -8051.1689 8262.75 C-8051.2505 8262.6367 -8051.5498 8262.9346 -8051.4893 8262.7207 Cf-8049.9761 8262.5 m-8049.9272 8262.5098 -8049.9072 8262.5361 -8049.8506 8262.4961 C-8049.7607 8262.5625 -8049.8555 8262.6689 -8049.9312 8262.6826 C-8049.9761 8262.5 Lf-8022.4287 8261.9141 m-8022.5923 8261.9863 L-8022.5684 8261.8418 L-8022.4287 8261.9141 Lf-8010.3574 8261.9063 m-8010.1943 8261.8145 -8010.2441 8262.043 -8010.2168 8262.0645 C-8010.3643 8262.0801 -8010.1621 8261.8848 -8010.3574 8261.9063 Cf-8003.8486 8261.1777 m-8003.8984 8261.1816 L-8003.8818 8260.8828 L-8003.8486 8261.1777 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 5)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8065 8263 m-8039.0591 8263 L-8039.0591 8237.0557 L-8065 8237.0557 L-8065 8263 Ln*u1 D0 O0.62 0.04 0.93 0 k-8039.9858 8256.915 m-8039.2168 8256.958 -8039.0718 8257.7461 -8039.4526 8257.8086 c-8039.8086 8257.8672 -8039.9175 8258.0762 -8039.7866 8258.2588 c-8039.6675 8258.4277 -8039.1934 8258.8096 -8039.0635 8258.9395 C-8039.0615 8258.9395 -8039.0635 8261.668 -8039.0635 8261.6689 c-8039.0703 8262.5098 -8039.6494 8262.3994 -8040.3896 8263 C-8043.1104 8263 L-8043.2085 8262.9102 -8043.2993 8262.8105 -8043.3818 8262.6992 c-8043.6943 8262.3096 -8043.8774 8262.1533 -8044.0063 8262.1533 c-8044.1377 8262.1533 -8044.1895 8262.2832 -8044.2158 8262.4922 c-8044.2417 8262.6738 -8044.4238 8262.752 -8044.6318 8262.752 c-8044.8662 8262.752 -8045.1006 8262.6221 -8045.1006 8262.3613 c-8045.1006 8261.8926 -8045.1279 8259.6514 -8045.5186 8259.6514 c-8045.5967 8259.6514 -8045.7002 8259.7305 -8045.8311 8259.8877 c-8046.6025 8260.8438 -8048.0513 8262.2529 -8050.0176 8263 C-8055.5835 8263 L-8056.9722 8262.4521 -8057.9951 8261.5146 -8058.7495 8260.4336 c-8060.8066 8257.4912 -8061.0142 8257.1777 -8062.3423 8257.1777 c-8063.1768 8257.1777 -8064.1919 8257.6992 -8064.1919 8259.1563 c-8064.1919 8259.8613 -8063.4111 8260.8242 -8062.6553 8260.8242 c-8061.9521 8260.8242 -8061.5615 8260.3301 -8061.5615 8259.9648 c-8061.5615 8259.8613 -8061.6665 8259.4434 -8061.6665 8259.3662 c-8061.6665 8258.9229 -8061.3535 8258.9229 -8061.2754 8258.9229 c-8060.9897 8258.9229 -8060.7295 8259.2871 -8060.7295 8259.8613 c-8060.7295 8260.668 -8061.4585 8261.7354 -8062.6294 8261.7354 c-8063.9839 8261.7354 -8065 8260.5381 -8065 8259.1318 c-8065 8256.5527 -8062.8374 8256.293 -8062.2646 8256.293 c-8061.5361 8256.293 -8060.6504 8256.5527 -8060.1294 8256.9697 C-8060.0254 8257.0479 -8059.9209 8257.1006 -8059.8433 8257.1006 c-8059.6606 8257.1006 -8059.5303 8256.8906 -8059.5303 8256.6055 c-8059.5303 8256.1895 -8058.4102 8251.7344 -8054.1382 8251.7344 c-8052.8105 8251.7344 -8050.6753 8252.751 -8050.6753 8255.1992 c-8050.6753 8257.6738 -8052.3154 8258.4814 -8053.3057 8258.4814 c-8054.2959 8258.4814 -8055.4155 8257.5957 -8055.4155 8256.4746 c-8055.4155 8255.1465 -8054.3218 8254.8613 -8053.9038 8254.8613 c-8053.5137 8254.8613 -8053.0713 8254.9902 -8052.9663 8255.2773 C-8052.8623 8255.6152 -8052.7329 8255.7979 -8052.5498 8255.7979 c-8052.4722 8255.7979 -8051.8462 8255.668 -8051.8462 8254.834 c-8051.8462 8252.9072 -8053.9038 8252.6982 -8054.4248 8252.6982 c-8056.3535 8252.6982 -8058.6958 8254.9121 -8058.6958 8257.4395 c-8058.6958 8260.7461 -8055.7534 8262.4922 -8052.7583 8262.4922 c-8049.6064 8262.4922 -8048.4097 8260.6943 -8048.4097 8260.3818 c-8048.4097 8260.1465 -8049.6592 8259.7041 -8049.6592 8259.4961 c-8049.6592 8259.1582 -8048.9561 8258.2988 -8048.2266 8258.2988 c-8046.6631 8258.2988 -8045.96 8257.0742 -8045.96 8256.3457 c-8045.96 8256.2139 -8046.0386 8256.1367 -8046.1943 8256.1367 c-8046.4033 8256.1367 -8047.2622 8256.3184 -8047.4458 8256.3184 c-8048.0967 8256.3184 -8049.2314 8256.2637 -8049.9678 8255.1563 c-8050.5854 8254.2285 -8050.1143 8253.3135 -8050.3994 8252.5615 c-8050.5352 8252.2012 -8051.9375 8250.9473 -8051.9521 8250.7637 C-8051.9727 8250.7852 L-8052.1943 8250.7852 -8053.5566 8250.4688 -8054.7842 8249.5313 C-8054.7783 8249.5957 -8054.7744 8249.6621 -8054.7744 8249.7324 c-8054.7744 8250.8535 -8055.8936 8251.7383 -8056.8838 8251.7383 c-8057.8745 8251.7383 -8059.5142 8250.9297 -8059.5142 8248.457 c-8059.5142 8246.4463 -8058.0762 8245.4023 -8056.8262 8245.0938 C-8056.6875 8243.7676 -8055.6494 8241.9297 -8053.3794 8241.9297 c-8050.9058 8241.9297 -8050.0977 8243.5703 -8050.0977 8244.5615 c-8050.0977 8245.5498 -8050.9834 8246.6689 -8052.1025 8246.6689 c-8052.1934 8246.6689 -8052.2783 8246.666 -8052.3599 8246.6543 C-8051.2471 8248.0166 -8051.0498 8249.7373 -8051.0498 8249.8623 C-8050.6602 8250.584 -8050.1743 8251.1406 v-8049.3174 8252.125 -8049.4995 8253.2031 -8049.2935 8253.8711 c-8048.9185 8255.0986 -8048.4346 8253.793 -8048.4346 8253.6621 c-8048.4346 8253.6357 -8048.5391 8252.9854 -8048.5391 8252.8799 c-8048.5391 8251.918 -8047.9146 8251.6055 -8047.6802 8251.6055 c-8047.1846 8251.6055 -8046.9248 8251.9951 -8046.9248 8252.5166 c-8046.9248 8252.6465 -8046.9502 8252.7754 -8046.9766 8252.9326 C-8047.1328 8253.6104 -8047.6802 8253.8711 -8047.6802 8254.418 c-8047.6802 8255.1738 -8047.0542 8255.4336 -8046.2998 8255.4336 C-8044.8096 8255.9053 -8044.4238 8256.918 v-8044.0386 8257.9307 -8044.4238 8258.585 -8044.3721 8258.8447 c-8043.8774 8261.6846 -8042.3408 8262.4922 -8041.8193 8262.4922 c-8040.8286 8262.4922 -8040.3354 8261.5801 -8040.3354 8260.668 c-8040.3354 8260.0176 -8041.0913 8259.2617 -8041.2471 8259.0273 c-8041.4287 8258.7676 -8042.2065 8257.7959 -8042.4272 8257.6133 c-8042.5088 8257.5449 -8042.9038 8257.3242 -8043.0386 8257.0137 C-8043.3335 8256.626 -8043.3486 8256.4434 -8043.9814 8256.0625 c-8044.5454 8255.7246 -8044.1265 8255.418 Y-8043.8394 8255.1836 -8043.7881 8254.4814 -8043.7881 8253.96 c-8043.7881 8253.0215 -8042.8232 8252.3975 -8042.5889 8252.3975 c-8042.4595 8252.3975 -8042.3545 8252.4746 -8042.3545 8252.6055 C-8042.4858 8253.2041 -8042.4858 8253.3086 v-8042.4858 8253.3613 -8042.6934 8254.8213 -8042.6665 8254.96 C-8042.4551 8255.0381 -8042.0635 8254.541 -8041.6416 8254.1465 C-8040.6958 8253.6504 -8039.5674 8251.3311 -8039.5674 8249.2969 c-8039.5674 8246.0156 -8041.4951 8243.3594 -8044.8042 8243.3594 c-8047.3286 8243.3594 -8049.3618 8245.2861 -8049.3618 8247.2402 c-8049.3618 8247.8906 -8049.0479 8249.793 -8047.3286 8249.793 c-8046.7305 8249.793 -8046.4697 8249.5313 -8046.4697 8249.2705 c-8046.4697 8249.0898 -8046.5742 8248.8799 -8046.7822 8248.6465 C-8047.0166 8248.4111 -8047.1729 8247.9951 -8047.1729 8247.6309 c-8047.1729 8247.3975 -8046.9385 8246.25 -8045.5854 8246.25 c-8044.4648 8246.25 -8043.5791 8247.3701 -8043.5791 8248.3594 c-8043.5791 8249.3496 -8044.3857 8250.9902 -8046.8608 8250.9902 c-8049.3096 8250.9902 -8050.3247 8248.8555 -8050.3247 8247.5264 c-8050.3247 8243.0723 -8045.6631 8242.5254 -8045.4546 8242.5254 c-8045.1685 8242.5254 -8044.96 8242.3945 -8044.96 8242.2129 c-8044.96 8242.1338 -8045.0122 8242.0303 -8045.0898 8241.9258 C-8045.5073 8241.4053 -8045.7666 8240.5186 -8045.7666 8239.791 c-8045.7666 8239.2168 -8045.5073 8237.0557 -8042.9282 8237.0557 c-8041.5215 8237.0557 -8040.3232 8237.8887 -8040.3232 8239.2441 c-8040.3232 8240.416 -8041.3921 8241.1455 -8042.1982 8241.1455 c-8042.7715 8241.1455 -8043.1362 8240.8848 -8043.1362 8240.5977 c-8043.1362 8240.5186 -8043.1362 8240.209 -8042.6934 8240.209 c-8042.6152 8240.209 -8042.1982 8240.3125 -8042.0942 8240.3125 c-8041.7295 8240.3125 -8041.2354 8239.9209 -8041.2354 8239.2168 c-8041.2354 8238.3584 -8042.2246 8237.8633 -8042.9014 8237.8633 c-8044.3599 8237.8633 -8044.8818 8238.8789 -8044.8818 8239.7119 c-8044.8818 8241.041 -8044.5698 8241.25 -8041.6265 8243.3066 c-8040.5439 8244.0615 -8039.6064 8245.085 -8039.0591 8246.4727 C-8039.0591 8252.0381 L-8039.4951 8253.1816 -8040.1538 8254.1494 -8040.8174 8254.9121 C-8042.4351 8256.3477 -8042.5034 8256.7754 -8039.9858 8256.915 cf0 D-8058.3169 8247.9863 m-8058.3169 8248.585 -8058.0562 8248.8477 -8057.7959 8248.8477 c-8057.6138 8248.8477 -8057.4058 8248.7422 -8057.1714 8248.5342 C-8056.9375 8248.2998 -8056.5195 8248.1445 -8056.1553 8248.1445 c-8056.1338 8248.1445 -8056.1055 8248.1465 -8056.0713 8248.1504 C-8056.4287 8247.5898 -8056.6943 8246.9199 -8056.7969 8246.126 C-8057.5313 8246.3594 -8058.3169 8246.8828 -8058.3169 8247.9863 cf-8052.7798 8243.8047 m-8052.7798 8243.7266 -8052.9102 8243.1016 -8053.7432 8243.1016 c-8055.1538 8243.1016 -8055.6431 8244.2012 -8055.8047 8244.998 C-8054.9424 8245.0313 -8054.2354 8245.2441 -8053.6538 8245.5654 C-8053.7002 8245.4072 -8053.7178 8245.2617 -8053.7178 8245.1602 c-8053.7178 8244.7695 -8053.5874 8244.3262 -8053.3008 8244.2227 C-8052.9614 8244.1162 -8052.7798 8243.9873 -8052.7798 8243.8047 cf-8051.9258 8249.875 m-8052.2158 8247.6543 -8053.9785 8245.9551 -8055.7646 8245.9551 c-8055.7935 8245.9551 -8055.8281 8245.957 -8055.8633 8245.958 C-8055.6895 8247.6191 -8053.9912 8249.4824 -8051.9258 8249.875 Cf*UU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 7)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8014.0845 8263 m-8014.0845 8237.0576 L-8065 8237.0576 L-8065 8263 L-8014.0845 8263 Ln*u0 O0.62 0.04 0.93 0 k-8017.1978 8243.8301 m-8017.3535 8243.6992 -8017.4321 8243.5957 -8017.4321 8243.5176 c-8017.4321 8243.127 -8015.1914 8243.1006 -8014.7222 8243.1006 c-8014.4614 8243.1006 -8014.3325 8242.8662 -8014.3325 8242.6318 c-8014.3325 8242.4229 -8014.4102 8242.2412 -8014.5918 8242.2139 c-8014.8008 8242.1895 -8014.9302 8242.1367 -8014.9302 8242.0059 c-8014.9302 8241.877 -8014.7744 8241.6943 -8014.3838 8241.3809 C-8014.2734 8241.2988 -8014.1738 8241.209 -8014.0845 8241.1104 C-8014.0845 8238.3887 L-8014.6831 8237.6465 -8015.7046 8237.1621 -8016.5449 8237.1621 c-8017.1714 8237.1621 -8017.8745 8237.5273 -8018.1089 8237.8135 C-8018.2383 8237.9434 -8018.3945 8237.9951 -8018.5503 8237.9951 c-8018.7075 8237.9951 -8018.8374 8237.9434 -8018.8896 8237.8398 c-8019.0718 8237.4492 -8019.4102 8237.1895 -8019.8794 8237.1895 c-8020.6353 8237.1895 -8023.5 8239.8711 -8023.5 8240.626 c-8023.5 8240.7568 -8023.3955 8240.8086 -8023.2129 8240.8086 c-8022.9785 8240.8086 -8022.5879 8240.7041 -8022.2241 8240.5215 C-8021.9897 8240.418 -8020.8955 8239.6113 -8020.6079 8239.6113 c-8020.2695 8239.6113 -8020.0352 8240.418 -8019.6978 8240.418 c-8019.4102 8240.418 -8018.3169 8239.4277 -8018.0566 8239.2461 c-8017.8223 8239.0898 -8017.0664 8238.334 -8016.4155 8238.334 c-8015.5039 8238.334 -8014.5918 8238.8281 -8014.5918 8239.8184 c-8014.5918 8240.3398 -8015.3994 8241.877 -8018.2383 8242.3711 c-8018.4995 8242.4229 -8019.8535 8242.3975 -8020.1665 8242.4229 c-8020.4785 8242.4492 -8022.0161 8241.9814 -8022.3535 8241.9023 c-8023.3955 8241.668 -8023.4736 8241.668 -8025.4272 8241.668 c-8025.5576 8241.668 -8025.6362 8241.668 -8025.6362 8241.5898 c-8025.6362 8241.5381 -8025.6094 8241.46 -8025.5313 8241.3564 C-8025.2705 8240.9648 -8025.0361 8240.4434 -8025.0361 8239.8447 c-8025.0361 8238.5166 -8026.3906 8237.1621 -8027.9014 8237.1621 c-8030.8184 8237.1621 -8030.8184 8238.8809 -8030.8184 8239.1152 c-8030.8184 8239.6621 -8030.4795 8240.7822 -8029.2295 8240.7822 c-8028.5264 8240.7822 -8028.2402 8240.4434 -8028.2402 8240.1309 c-8028.2402 8239.8975 -8028.3706 8239.7148 -8028.5527 8239.6367 c-8028.8135 8239.5322 -8028.9175 8239.4023 -8028.9175 8239.2725 c-8028.9175 8239.0117 -8028.5527 8238.7773 -8028.1094 8238.7773 c-8027.3022 8238.7773 -8026.5474 8239.5586 -8026.5474 8240.21 c-8026.5474 8242.293 -8030.8975 8242.8926 -8031.1313 8242.8926 c-8031.4185 8242.8926 -8031.6777 8242.8145 -8031.8862 8242.502 C-8034.1255 8239.3789 -8038.0273 8237.0625 -8039.54 8237.0586 C-8039.54 8237.0586 L-8039.5415 8237.0586 -8039.5415 8237.0586 -8039.5425 8237.0586 c-8039.5435 8237.0586 -8039.5435 8237.0586 -8039.5439 8237.0586 C-8039.5439 8237.0586 L-8041.5498 8237.0615 -8045.1675 8239.6387 -8047.1978 8242.502 c-8047.4063 8242.8145 -8047.6665 8242.8926 -8047.9526 8242.8926 c-8049.3071 8242.8926 -8052.8496 8241.7197 -8052.8496 8239.8447 c-8052.8496 8239.2725 -8052.5103 8238.8281 -8051.8081 8238.8281 c-8051.1558 8238.8281 -8050.7134 8239.0117 -8050.7134 8239.2197 c-8050.7134 8239.3242 -8050.8706 8239.4541 -8051.1558 8239.585 C-8051.3135 8239.6367 -8051.4175 8239.8184 -8051.4175 8240.0273 c-8051.4175 8240.4961 -8051 8241.0957 -8049.8281 8241.0957 c-8048.6558 8241.0957 -8048.1875 8240.3916 -8048.1875 8239.6621 c-8048.1875 8238.334 -8049.3071 8237.1104 -8051.6777 8237.1104 c-8053.6313 8237.1104 -8054.5679 8238.3594 -8054.5679 8239.4277 c-8054.5679 8240.4961 -8053.9697 8240.8613 -8053.6826 8241.2256 c-8053.5786 8241.3564 -8053.5264 8241.4336 -8053.5264 8241.4854 c-8053.5264 8241.5645 -8053.6055 8241.5898 -8053.7607 8241.5898 c-8054.3857 8241.5898 -8057.1729 8242.0586 -8057.7466 8242.0586 c-8058.4751 8242.0586 -8064.4395 8242.0586 -8064.4395 8240.002 c-8064.4395 8239.0361 -8063.6846 8238.543 -8062.7983 8238.543 c-8062.1475 8238.543 -8061.2881 8239.4814 -8060.8457 8239.793 c-8060.1426 8240.3145 -8059.6206 8240.3145 Y-8059.4648 8240.3145 -8059.3862 8240.2607 -8059.3599 8240.1563 C-8059.2305 8239.1416 -8059.1519 8238.9336 -8058.8662 8238.9336 c-8058.3975 8238.9336 -8057.5898 8239.6895 -8057.4072 8240.0801 c-8057.2778 8240.3662 -8056.9902 8240.4961 -8056.7041 8240.4961 c-8056.4185 8240.4961 -8056.0791 8240.3662 -8056.0791 8239.9229 c-8056.0791 8238.9072 -8058.71 8237.1895 -8059.2046 8237.1895 c-8059.6738 8237.1895 -8060.0122 8237.4492 -8060.1943 8237.8398 c-8060.2466 8237.9434 -8060.3774 8237.9951 -8060.5327 8237.9951 c-8060.6895 8237.9951 -8060.8457 8237.9434 -8060.9761 8237.8135 C-8061.21 8237.5273 -8061.9126 8237.1621 -8062.5386 8237.1621 c-8063.3794 8237.1621 -8064.3999 8237.6465 -8065 8238.3887 C-8065 8241.0654 L-8064.9082 8241.1738 -8064.8081 8241.2793 -8064.7002 8241.3809 C-8064.4395 8241.6426 -8064.3359 8241.7979 -8064.3359 8241.9287 c-8064.3359 8242.085 -8064.9346 8242.502 -8064.9346 8242.6318 c-8064.9346 8243.3086 -8064.3882 8243.3086 -8063.1895 8243.3086 c-8063.0063 8243.3086 -8062.1738 8243.2568 -8062.0176 8243.2568 c-8061.7568 8243.2568 -8061.6274 8243.3359 -8061.6274 8243.4648 c-8061.6274 8243.5693 -8061.7305 8243.6992 -8061.8862 8243.8301 c-8062.8442 8244.6016 -8064.2529 8246.0508 -8065 8248.0166 C-8065 8253.583 L-8064.4526 8254.9717 -8063.5166 8255.9941 -8062.4336 8256.75 c-8059.4912 8258.8066 -8059.1782 8259.0137 -8059.1782 8260.3418 c-8059.1782 8261.1758 -8059.6992 8262.1914 -8061.1582 8262.1914 c-8061.8354 8262.1914 -8062.8242 8261.6973 -8062.8242 8260.8369 c-8062.8242 8260.1338 -8062.3306 8259.7441 -8061.9648 8259.7441 c-8061.8618 8259.7441 -8061.4438 8259.8477 -8061.3662 8259.8477 c-8060.9238 8259.8477 -8060.9238 8259.5352 -8060.9238 8259.457 c-8060.9238 8259.1709 -8061.2881 8258.9102 -8061.8618 8258.9102 c-8062.6685 8258.9102 -8063.7358 8259.6377 -8063.7358 8260.8105 c-8063.7358 8262.166 -8062.5386 8262.999 -8061.1318 8262.999 c-8058.5537 8262.999 -8058.2935 8260.8369 -8058.2935 8260.2637 c-8058.2935 8259.5352 -8058.5537 8258.6494 -8058.9702 8258.1279 C-8059.0479 8258.0234 -8059.1006 8257.9199 -8059.1006 8257.8428 c-8059.1006 8257.6602 -8058.8911 8257.5293 -8058.6055 8257.5293 c-8058.3975 8257.5293 -8053.7344 8256.9824 -8053.7344 8252.5293 c-8053.7344 8251.2012 -8054.7515 8249.0654 -8057.1992 8249.0654 c-8059.6738 8249.0654 -8060.4814 8250.7061 -8060.4814 8251.6953 c-8060.4814 8252.6855 -8059.5962 8253.8047 -8058.4751 8253.8047 c-8057.1206 8253.8047 -8056.8862 8252.6592 -8056.8862 8252.4248 c-8056.8862 8252.0615 -8057.0435 8251.6426 -8057.2778 8251.4092 C-8057.4858 8251.1738 -8057.5898 8250.9658 -8057.5898 8250.7832 c-8057.5898 8250.5215 -8057.3286 8250.2637 -8056.7305 8250.2637 c-8055.0122 8250.2637 -8054.6992 8252.166 -8054.6992 8252.8145 c-8054.6992 8254.7695 -8056.7305 8256.6953 -8059.2568 8256.6953 c-8062.5649 8256.6953 -8064.4922 8254.04 -8064.4922 8250.7578 c-8064.4922 8248.4668 -8063.0586 8245.8096 -8062.0698 8245.8096 c-8061.6519 8245.8096 -8061.5742 8246.5898 -8061.5742 8246.7471 c-8061.5742 8246.8506 -8061.7046 8247.4502 Y-8061.7046 8247.5801 -8061.6006 8247.6582 -8061.4702 8247.6582 c-8061.2358 8247.6582 -8060.2729 8247.0332 -8060.2729 8246.0957 c-8060.2729 8245.5752 -8060.2207 8244.8711 -8059.9336 8244.6367 c-8059.7524 8244.4814 -8058.5801 8243.96 -8058.3457 8243.96 c-8058.2144 8243.96 -8058.1367 8244.0381 -8058.1367 8244.1953 c-8058.1367 8244.4023 -8058.3193 8245.3145 -8058.3193 8245.4961 c-8058.3193 8246.877 -8057.5122 8247.8926 -8056.0527 8247.8926 c-8055.8975 8247.8926 -8055.3242 8247.8672 -8055.3242 8247.6328 c-8055.3242 8247.502 -8055.8711 8247.1367 -8055.8711 8247.0078 c-8055.8711 8246.877 -8055.7935 8246.7979 -8055.6626 8246.7979 c-8055.6367 8246.7979 -8054.9858 8246.9023 -8054.8809 8246.9023 c-8053.9175 8246.9023 -8053.6055 8246.2783 -8053.6055 8246.0439 c-8053.6055 8245.5488 -8053.9951 8245.2891 -8054.5166 8245.2891 c-8054.6465 8245.2891 -8054.7778 8245.3145 -8054.9336 8245.3408 C-8055.6104 8245.4961 -8055.8711 8246.0439 -8056.4185 8246.0439 c-8057.1729 8246.0439 -8057.4336 8245.0537 -8057.4336 8244.2988 c-8057.4336 8243.3857 -8055.8184 8242.8398 -8054.0991 8242.8398 c-8052.1465 8242.8398 -8048.5786 8244.2471 -8048.5786 8244.9756 C-8049.6982 8248.2578 -8049.8545 8248.8828 v-8049.9063 8249.1162 -8049.9839 8249.2207 -8050.0889 8249.2207 c-8050.4282 8249.2207 -8051.0527 8247.5273 -8051.3394 8247.5273 c-8051.7031 8247.5273 -8051.9121 8248.5703 -8051.9121 8249.7158 c-8051.9121 8253.2314 -8049.6465 8258.3369 -8049.1504 8259.0664 c-8049.0474 8259.2227 -8048.9946 8259.3535 -8048.9946 8259.4824 c-8048.9946 8259.6914 -8049.1504 8259.8477 -8049.3857 8259.8477 c-8049.4639 8259.8477 -8052.8496 8258.5967 -8052.8496 8257.8682 c-8052.8496 8257.7119 -8052.7969 8257.582 -8052.7969 8257.4512 c-8052.7969 8257.0352 -8053.0313 8256.8535 -8053.5786 8256.8535 c-8054.3857 8256.8535 -8054.4385 8257.2168 -8054.4385 8257.4258 c-8054.4385 8257.6348 -8054.3857 8257.8945 -8054.3857 8258.4414 c-8054.3857 8258.6758 -8054.4639 8259.4053 -8054.6729 8259.457 c-8055.4814 8259.6377 -8056.2617 8260.1602 -8056.2617 8260.5244 c-8056.2617 8261.0723 -8055.5054 8262.5039 -8055.1934 8262.5039 c-8054.7246 8262.5039 -8053.7344 8260.2383 -8053.3706 8260.2383 c-8053.1626 8260.2383 -8052.4849 8262.6348 -8052.0425 8262.6348 c-8051.8594 8262.6348 -8051.6514 8262.3994 -8051.6514 8262.0352 c-8051.6514 8261.4629 -8052.1465 8260.6289 -8052.1465 8260.2383 c-8052.1465 8260.0557 -8052.0688 8259.9512 -8051.9121 8259.9512 c-8051.5728 8259.9512 -8050.2715 8260.6025 -8048.5786 8261.4629 c-8047.1978 8262.1377 -8046.1816 8262.999 -8044.4102 8262.999 c-8041.6504 8262.999 -8039.6455 8261.125 -8039.6455 8257.6602 c-8039.6455 8256.5918 -8039.8262 8255.4463 -8040.1138 8254.2744 c-8040.2954 8253.5439 -8041.5454 8250.3672 -8041.5454 8249.6904 c-8041.5454 8249.4033 -8041.4414 8249.2734 -8041.2334 8249.2734 c-8041.0513 8249.2734 -8040.2974 8249.5586 -8039.5439 8249.5596 C-8039.5439 8249.5596 L-8039.5435 8249.5596 -8039.5435 8249.5596 -8039.5425 8249.5596 c-8039.5415 8249.5596 -8039.5415 8249.5596 -8039.54 8249.5596 C-8039.54 8249.5596 L-8038.7866 8249.5586 -8038.0337 8249.2734 -8037.8506 8249.2734 c-8037.6426 8249.2734 -8037.5386 8249.4033 -8037.5386 8249.6904 c-8037.5386 8250.3672 -8038.7881 8253.5439 -8038.9702 8254.2744 c-8039.2568 8255.4463 -8039.4395 8256.5918 -8039.4395 8257.6602 c-8039.4395 8261.125 -8037.4336 8262.999 -8034.6729 8262.999 c-8032.9023 8262.999 -8031.8862 8262.1377 -8030.5054 8261.4629 c-8028.8135 8260.6025 -8027.5103 8259.9512 -8027.1719 8259.9512 c-8027.0161 8259.9512 -8026.9375 8260.0557 -8026.9375 8260.2383 c-8026.9375 8260.6289 -8027.4326 8261.4629 -8027.4326 8262.0352 c-8027.4326 8262.3994 -8027.2246 8262.6348 -8027.0425 8262.6348 c-8026.5474 8262.6348 -8025.8706 8259.8213 -8025.6362 8259.8213 c-8025.3755 8259.8213 -8025.0098 8261.0449 -8024.7231 8262.0879 c-8024.5938 8262.582 -8024.2554 8262.7637 -8023.9688 8262.7637 c-8023.6035 8262.7637 -8023.2393 8262.5039 -8023.2393 8262.1377 c-8023.2393 8262.0098 -8023.2915 8261.8535 -8023.3955 8261.6973 c-8025.2705 8258.832 -8024.8018 8257.4785 -8025.0625 8256.9297 c-8025.1665 8256.7227 -8025.4785 8256.6182 -8025.7656 8256.6182 c-8026.2344 8256.6182 -8026.2344 8256.75 -8026.2344 8257.8682 c-8026.2344 8258.5967 -8029.6201 8259.8477 -8029.6982 8259.8477 c-8029.9326 8259.8477 -8030.0889 8259.6914 -8030.0889 8259.4824 c-8030.0889 8259.3535 -8030.0366 8259.2227 -8029.9326 8259.0664 c-8029.4375 8258.3369 -8027.1719 8253.2314 -8027.1719 8249.7158 c-8027.1719 8248.5703 -8027.3809 8247.5273 -8027.7446 8247.5273 c-8028.0845 8247.5273 -8028.6313 8249.6641 -8029.0215 8249.6641 c-8029.2295 8249.6641 -8030.0889 8246.0693 -8030.3755 8245.4189 c-8030.4546 8245.2354 -8030.5054 8245.0801 -8030.5054 8244.9756 c-8030.5054 8244.2471 -8026.9375 8242.8398 -8024.9839 8242.8398 c-8023.2656 8242.8398 -8021.6504 8243.3857 -8021.6504 8244.2988 c-8021.6504 8245.0537 -8021.9111 8245.6797 -8022.6665 8245.6797 c-8023.2129 8245.6797 -8023.4736 8245.1318 -8024.1504 8244.9756 C-8024.3066 8244.9502 -8024.4375 8244.9238 -8024.5674 8244.9238 c-8025.0879 8244.9238 -8025.4785 8245.1846 -8025.4785 8245.6797 c-8025.4785 8245.9141 -8025.1665 8246.5391 -8024.2031 8246.5391 c-8024.0986 8246.5391 -8023.4473 8246.4336 -8023.4214 8246.4336 c-8023.2915 8246.4336 -8023.2129 8246.5127 -8023.2129 8246.6426 c-8023.2129 8246.7734 -8023.7598 8247.1367 -8023.7598 8247.2666 c-8023.7598 8247.502 -8023.1875 8247.5273 -8023.0313 8247.5273 c-8022.0674 8247.5273 -8020.7646 8246.9023 -8020.7646 8245.4453 c-8020.7646 8245.2617 -8020.9473 8244.4023 -8020.9473 8244.1953 c-8020.9473 8244.0381 -8020.8687 8243.96 -8020.7393 8243.96 c-8020.0098 8243.96 -8018.7856 8244.6641 -8018.7856 8246.2266 c-8018.7856 8246.9551 -8017.9258 8247.6582 -8017.5879 8247.6582 c-8017.3794 8247.6582 -8016.9375 8246.4082 -8016.7026 8246.4082 c-8016.3887 8246.4082 -8014.5918 8247.6064 -8014.5918 8250.7578 c-8014.5918 8253.7529 -8016.3374 8256.6953 -8019.6455 8256.6953 c-8022.1719 8256.6953 -8024.3848 8254.3535 -8024.3848 8252.4248 c-8024.3848 8251.9033 -8024.1768 8249.8457 -8022.25 8249.8457 c-8021.4165 8249.8457 -8021.2866 8250.4717 -8021.2866 8250.5488 c-8021.2866 8250.7324 -8021.4688 8250.8623 -8021.8066 8250.9658 C-8022.0938 8251.0703 -8022.2241 8251.5137 -8022.2241 8251.9033 c-8022.2241 8252.3193 -8021.9375 8253.4141 -8020.6079 8253.4141 c-8019.4878 8253.4141 -8018.6035 8252.2949 -8018.6035 8251.3047 c-8018.6035 8250.3145 -8019.4102 8248.6738 -8021.8848 8248.6738 c-8024.3335 8248.6738 -8025.3486 8250.8105 -8025.3486 8252.1377 c-8025.3486 8256.4102 -8020.8955 8257.5293 -8020.4785 8257.5293 c-8020.1914 8257.5293 -8019.9834 8257.6602 -8019.9834 8257.8428 c-8019.9834 8257.9199 -8020.0352 8258.0234 -8020.1138 8258.1279 C-8020.5303 8258.6494 -8020.7915 8259.5352 -8020.7915 8260.2637 c-8020.7915 8260.8369 -8020.5303 8262.999 -8017.9521 8262.999 c-8016.5449 8262.999 -8015.3481 8261.9824 -8015.3481 8260.6289 c-8015.3481 8259.457 -8016.4155 8258.7285 -8017.2222 8258.7285 c-8017.7959 8258.7285 -8018.1602 8258.9873 -8018.1602 8259.2754 c-8018.1602 8259.3535 -8018.1602 8259.666 -8017.7178 8259.666 c-8017.6401 8259.666 -8017.2222 8259.5615 -8017.1182 8259.5615 c-8016.7534 8259.5615 -8016.2593 8259.9512 -8016.2593 8260.6543 c-8016.2593 8261.4102 -8017.2222 8262.1914 -8017.9258 8262.1914 c-8019.3848 8262.1914 -8019.9058 8261.1758 -8019.9058 8260.3418 c-8019.9058 8259.0137 -8019.5928 8258.8066 -8016.6494 8256.75 c-8015.5674 8255.9941 -8014.6313 8254.9717 -8014.0845 8253.583 C-8014.0845 8248.0166 L-8014.8311 8246.0508 -8016.2402 8244.6016 -8017.1978 8243.8301 cf1 D-8040.6338 8257.4512 m-8040.6338 8260.3164 -8042.1978 8261.75 -8043.1602 8261.75 c-8043.7075 8261.75 -8045.6606 8260.8887 -8045.6606 8258.5449 c-8045.6606 8258.0762 -8045.6094 8257.582 -8045.5835 8257.166 c-8045.5313 8256.4102 -8045.2441 8256.0186 -8044.75 8255.6016 c-8044.4375 8255.3418 -8043.6289 8254.6377 -8043.6289 8253.7529 c-8043.6289 8253.0488 -8044.3066 8251.9033 -8045.6094 8251.9033 c-8046.2085 8251.9033 -8047.6665 8252.166 -8047.6665 8255.3164 c-8047.6665 8257.9727 -8046.7295 8259.7441 -8046.5718 8259.9785 C-8046.4946 8260.1338 -8046.4424 8260.2383 -8046.4424 8260.3164 c-8046.4424 8260.3945 -8046.4946 8260.4463 -8046.5474 8260.4463 c-8047.4849 8260.4463 -8048.9165 8257.1377 -8048.9165 8254.1689 c-8048.9165 8251.9824 -8047.3799 8246.9551 -8045.9736 8246.9551 c-8044.4897 8246.9551 -8040.6338 8252.6074 -8040.6338 8257.4512 cf-8039.54 8247.0586 m-8039.54 8247.0586 L-8039.5415 8247.0586 -8039.5415 8247.0586 -8039.5425 8247.0586 c-8039.5435 8247.0586 -8039.5435 8247.0586 -8039.5439 8247.0586 C-8039.5439 8247.0586 L-8040.5313 8247.0615 -8041.3374 8247.3984 -8041.8584 8247.9453 c-8041.9634 8248.0488 -8042.0928 8248.127 -8042.2222 8248.127 c-8042.6401 8248.127 -8044.8535 8246.4082 -8044.8535 8245.0801 c-8044.8535 8243.6738 -8041.6504 8241.7725 -8039.54 8241.2773 C-8039.54 8241.252 L-8036.8594 8242.1113 -8034.2305 8243.752 -8034.2305 8245.0801 c-8034.2305 8246.4082 -8036.4438 8248.127 -8036.8618 8248.127 c-8036.9912 8248.127 -8037.1206 8248.0488 -8037.2256 8247.9453 c-8037.7466 8247.3984 -8038.5518 8247.0615 -8039.54 8247.0586 Cf-8030.1685 8254.1689 m-8030.1685 8257.1377 -8031.6001 8260.4463 -8032.5366 8260.4463 c-8032.5898 8260.4463 -8032.6416 8260.3945 -8032.6416 8260.3164 c-8032.6416 8260.2383 -8032.5898 8260.1338 -8032.5122 8259.9785 C-8032.3555 8259.7441 -8031.4185 8257.9727 -8031.4185 8255.3164 c-8031.4185 8253.7793 -8031.8862 8251.8506 -8033.3711 8251.8506 c-8033.9185 8251.8506 -8035.5854 8252.7109 -8035.5854 8253.5967 c-8035.5854 8253.7793 -8035.4814 8254.5869 -8034.6206 8255.2637 c-8034.1265 8255.6543 -8033.7354 8256.2529 -8033.5015 8256.9824 C-8033.3975 8257.3994 -8033.3184 8257.8945 -8033.3184 8258.3887 c-8033.3184 8259.1973 -8033.6577 8261.7754 -8035.6113 8261.7754 c-8036.6782 8261.7754 -8038.4497 8260.6289 -8038.4497 8257.4512 c-8038.4497 8252.6074 -8034.5942 8246.9551 -8033.1104 8246.9551 c-8031.7041 8246.9551 -8030.1685 8251.9824 -8030.1685 8254.1689 cf*UU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 3 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe Calligr) -(aphic Brush Tool/ 3 pt. Round/ Adobe Calligraphic Brush Tool/ ) -(7 pt. Round/ Adobe ArtOnPath Brush Tool/ Pencil - Thin/ Adobe ) -(ArtOnPath Brush Tool/ Charcoal/ Adobe ArtOnPath Brush Tool/ Ba) -(nner/ Adobe PatternOnPath Brush Tool/ Ornamental Border/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Flat)(1 3 3 9 9 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner)(1 / Unnamed Brush Pat/ / / / / 5 0.976471 0.741176 0.372549 / ) -( 1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Pencil - Thin)(1 / Unnamed 2/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Ornamental Border)(1 / Unnamed Brush Pat 7/ Unnamed Brush Pat 5/ Unnamed Brush Pa) -(t 2/ / / 5 0.423529 0.72549 0.313726 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 k(White)Pc0.1 0.11 0.49 0 k(C=10 M=11 Y=49 K=0 1)Pc0.1 0.2 1 0.1 k(C=10 M=20 Y=100 K=10 1)Pc0 0 0 1 k(Black)Pc0 1 1 0 k(CMYK Red)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 2 79 255 79 0 50 Lb(don) Ln0 A1 Ap0 D0 J 0 j 1 w 4 M []0 d0 XR198 -54 m54 -54 L54 198 L198 198 L198 -54 Lnu*u0 Ap0 O0 0 0 0 k0 R0 0 0 1 K0.35 w106.7817 29.9287 m107.188 29.6621 L105.8364 27.6025 L105.9556 27.6445 106.1099 27.6943 106.3477 27.6943 c107.1812 27.6943 107.7764 27.0078 107.7764 26.1953 c107.7764 25.2568 107.0342 24.6475 106.2075 24.6475 c105.2974 24.6475 104.6807 25.376 104.6807 26.167 c104.6807 26.6572 104.8911 27.1201 105.248 27.6523 C106.7817 29.9287 lb1 D105.1709 26.1953 m105.1709 25.6143 105.6475 25.1377 106.2285 25.1377 c106.8101 25.1377 107.2861 25.6143 107.2861 26.1953 c107.2861 26.7764 106.8169 27.2529 106.2285 27.2529 c105.6475 27.2529 105.1709 26.7764 105.1709 26.1953 cb*U*u0 D109.9736 29.4375 m109.4834 29.4375 109.2031 29.165 109.0068 28.6396 c108.4956 28.6396 L108.6851 29.501 109.2661 29.9287 109.9663 29.9287 c110.7788 29.9287 111.4165 29.3467 111.4165 28.6328 c111.4165 28.2051 111.1992 27.8555 110.772 27.6025 c111.3672 27.3574 111.6895 26.8252 111.6895 26.2725 c111.6895 25.4316 111.0239 24.6475 109.9805 24.6475 c109.1123 24.6475 108.5098 25.1445 108.3276 26.1182 c108.8247 26.1182 L108.9932 25.4805 109.3364 25.1377 109.9878 25.1377 c110.7231 25.1377 111.1992 25.6563 111.1992 26.2373 c111.1992 26.6084 110.9893 26.9512 110.6387 27.1406 c110.3516 27.2949 110.0508 27.3154 109.7285 27.3301 c109.7285 27.792 L110.5269 27.8408 110.8911 28.1699 110.8911 28.6328 c110.8911 29.0596 110.52 29.4375 109.9736 29.4375 cb*U*u114.5376 29.9287 m114.9438 29.6621 L113.5923 27.6025 L113.7114 27.6445 113.8657 27.6943 114.1035 27.6943 c114.937 27.6943 115.5322 27.0078 115.5322 26.1953 c115.5322 25.2568 114.79 24.6475 113.9634 24.6475 c113.0532 24.6475 112.4365 25.376 112.4365 26.167 c112.4365 26.6572 112.647 27.1201 113.0039 27.6523 C114.5376 29.9287 lb1 D112.9268 26.1953 m112.9268 25.6143 113.4033 25.1377 113.9844 25.1377 c114.5659 25.1377 115.042 25.6143 115.042 26.1953 c115.042 26.7764 114.5728 27.2529 113.9844 27.2529 c113.4033 27.2529 112.9268 26.7764 112.9268 26.1953 cb*U*u0 D116.0625 26.875 m117.9463 26.875 L117.9463 26.4541 L116.0625 26.4541 L116.0625 26.875 lb*U*u120.2983 26.8467 m120.8867 27.4844 121.23 27.8691 121.23 28.415 c121.23 28.9971 120.7534 29.4658 120.144 29.4658 c119.5068 29.4658 119.0376 28.9971 118.9746 28.2266 c118.4912 28.2266 L118.5195 29.207 119.2266 29.9287 120.165 29.9287 c121.0757 29.9287 121.7202 29.2559 121.7202 28.415 c121.7202 27.7295 121.314 27.2529 120.7183 26.6084 c119.4648 25.2637 L121.79 25.2637 L121.79 24.7734 L118.3721 24.7734 L120.2983 26.8467 lb*U*u124.0083 29.9287 m124.8345 29.9287 125.4438 29.3115 125.4438 28.6045 c125.4438 28.1426 125.2129 27.792 124.7363 27.5332 c125.3457 27.2246 125.6821 26.833 125.6821 26.2158 c125.6821 25.418 125.1006 24.6543 123.9731 24.6543 c122.8735 24.6543 122.2852 25.3965 122.2852 26.1738 c122.2852 26.8184 122.6494 27.2246 123.2588 27.5332 c122.7544 27.792 122.5093 28.1846 122.5093 28.6182 c122.5093 29.3115 123.1538 29.9287 124.0083 29.9287 cb1 D122.7754 26.1602 m122.7754 25.6064 123.2305 25.1162 123.98 25.1162 c124.7153 25.1162 125.1919 25.6279 125.1919 26.209 c125.1919 26.7412 124.6943 27.2813 124.0083 27.2813 c123.2866 27.2813 122.7754 26.7275 122.7754 26.1602 cb123.0347 28.6113 m123.0347 28.1426 123.5039 27.7432 124.001 27.7432 c124.5684 27.7432 124.9536 28.1982 124.9536 28.626 c124.9536 29.0107 124.6245 29.4375 123.9873 29.4375 c123.4409 29.4375 123.0347 29.0664 123.0347 28.6113 cb*U*u0 D127.8867 29.9287 m128.7129 29.9287 129.3223 29.3115 129.3223 28.6045 c129.3223 28.1426 129.0908 27.792 128.6143 27.5332 c129.2236 27.2246 129.5605 26.833 129.5605 26.2158 c129.5605 25.418 128.9785 24.6543 127.8516 24.6543 c126.7515 24.6543 126.1631 25.3965 126.1631 26.1738 c126.1631 26.8184 126.5273 27.2246 127.1367 27.5332 c126.6323 27.792 126.3872 28.1846 126.3872 28.6182 c126.3872 29.3115 127.0313 29.9287 127.8867 29.9287 cb1 D126.6533 26.1602 m126.6533 25.6064 127.1084 25.1162 127.8574 25.1162 c128.5938 25.1162 129.0703 25.6279 129.0703 26.209 c129.0703 26.7412 128.5723 27.2813 127.8867 27.2813 c127.1641 27.2813 126.6533 26.7275 126.6533 26.1602 cb126.9126 28.6113 m126.9126 28.1426 127.3818 27.7432 127.8789 27.7432 c128.4463 27.7432 128.832 28.1982 128.832 28.626 c128.832 29.0107 128.502 29.4375 127.8652 29.4375 c127.3184 29.4375 126.9126 29.0664 126.9126 28.6113 cb*U*u0 D130.0195 26.875 m131.9043 26.875 L131.9043 26.4541 L130.0195 26.4541 L130.0195 26.875 lb*U*u134.0107 29.4375 m133.5205 29.4375 133.2402 29.165 133.0439 28.6396 c132.5332 28.6396 L132.7227 29.501 133.3027 29.9287 134.0039 29.9287 c134.8164 29.9287 135.4531 29.3467 135.4531 28.6328 c135.4531 28.2051 135.2363 27.8555 134.8086 27.6025 c135.4043 27.3574 135.7266 26.8252 135.7266 26.2725 c135.7266 25.4316 135.0605 24.6475 134.0176 24.6475 c133.1494 24.6475 132.5469 25.1445 132.3652 26.1182 c132.8613 26.1182 L133.0303 25.4805 133.373 25.1377 134.0254 25.1377 c134.7598 25.1377 135.2363 25.6563 135.2363 26.2373 c135.2363 26.6084 135.0264 26.9512 134.6758 27.1406 c134.3887 27.2949 134.0879 27.3154 133.7656 27.3301 c133.7656 27.792 L134.5645 27.8408 134.9277 28.1699 134.9277 28.6328 c134.9277 29.0596 134.5566 29.4375 134.0107 29.4375 cb*U*u138.9805 29.9287 m139.0859 29.9287 L139.0859 26.4336 L139.6953 26.4336 L139.6953 25.9434 L139.0859 25.9434 L139.0859 24.7734 L138.582 24.7734 L138.582 25.9434 L136.1797 25.9434 L138.9805 29.9287 lb1 D138.582 26.4336 m138.582 28.5205 L137.1035 26.4336 L138.582 26.4336 lb*U*u0 D141.2207 24.6475 m140.8066 24.9131 L142.166 26.9727 L142.0254 26.9307 141.8574 26.8818 141.6475 26.8818 c140.8145 26.8818 140.2256 27.5605 140.2256 28.3809 c140.2256 29.3115 140.9541 29.9287 141.7871 29.9287 c142.6982 29.9287 143.3145 29.207 143.3145 28.4082 c143.3145 27.9248 143.1035 27.4561 142.7471 26.9238 C141.2207 24.6475 lb1 D142.8242 28.3809 m142.8242 28.9619 142.3555 29.4375 141.7666 29.4375 c141.1855 29.4375 140.7158 28.9688 140.7158 28.3809 c140.7158 27.7988 141.1855 27.3232 141.7666 27.3232 c142.3477 27.3232 142.8242 27.7988 142.8242 28.3809 cb*U*u0 D146.3301 29.9287 m146.7363 29.6621 L145.3848 27.6025 L145.5039 27.6445 145.6582 27.6943 145.8965 27.6943 c146.7305 27.6943 147.3252 27.0078 147.3252 26.1953 c147.3252 25.2568 146.583 24.6475 145.7559 24.6475 c144.8457 24.6475 144.2295 25.376 144.2295 26.167 c144.2295 26.6572 144.4395 27.1201 144.7969 27.6523 C146.3301 29.9287 lb1 D144.7197 26.1953 m144.7197 25.6143 145.1963 25.1377 145.7773 25.1377 c146.3594 25.1377 146.835 25.6143 146.835 26.1953 c146.835 26.7764 146.3652 27.2529 145.7773 27.2529 c145.1963 27.2529 144.7197 26.7764 144.7197 26.1953 cb*U*u0 D90.5898 -1.56641 m91.0527 -1.56641 L92.1079 -4.0752 L93.2158 -1.56641 L93.2939 -1.56641 L94.4082 -4.0752 L95.4834 -1.56641 L95.9458 -1.56641 L94.4473 -5.02637 L94.3623 -5.02637 L93.2612 -2.55078 L92.1538 -5.02637 L92.0625 -5.02637 L90.5898 -1.56641 lb*U*u96.1709 -1.56641 m96.6338 -1.56641 L97.689 -4.0752 L98.7969 -1.56641 L98.875 -1.56641 L99.9893 -4.0752 L101.0645 -1.56641 L101.5269 -1.56641 L100.0283 -5.02637 L99.9434 -5.02637 L98.8423 -2.55078 L97.7349 -5.02637 L97.6436 -5.02637 L96.1709 -1.56641 lb*U*u101.752 -1.56641 m102.2148 -1.56641 L103.27 -4.0752 L104.3779 -1.56641 L104.4561 -1.56641 L105.5703 -4.0752 L106.6455 -1.56641 L107.1079 -1.56641 L105.6094 -5.02637 L105.5244 -5.02637 L104.4233 -2.55078 L103.3159 -5.02637 L103.2246 -5.02637 L101.752 -1.56641 lb*U*u108.6816 -4.71973 m108.6816 -4.94141 108.5054 -5.11719 108.2905 -5.11719 c108.0688 -5.11719 107.8994 -4.93555 107.8994 -4.71973 c107.8994 -4.50488 108.0757 -4.32227 108.2905 -4.32227 c108.499 -4.32227 108.6816 -4.49902 108.6816 -4.71973 cb*U*u113.2178 -3.30664 m113.2178 -4.29004 112.4556 -5.11719 111.4131 -5.11719 c110.3706 -5.11719 109.6084 -4.29004 109.6084 -3.30664 c109.6084 -2.31543 110.377 -1.47559 111.4131 -1.47559 c112.4487 -1.47559 113.2178 -2.31543 113.2178 -3.30664 cb1 D110.0645 -3.3125 m110.0645 -4.06836 110.6313 -4.6875 111.4131 -4.6875 c112.1885 -4.6875 112.7617 -4.06836 112.7617 -3.3125 c112.7617 -2.54395 112.1494 -1.90527 111.4131 -1.90527 c110.6704 -1.90527 110.0645 -2.54395 110.0645 -3.3125 cb*U*u0 D114.4131 -1.02539 m114.4131 -0.46582 114.5498 -0.132813 115.1167 -0.132813 c115.3057 -0.132813 115.4819 -0.185547 115.625 -0.231445 c115.625 -0.667969 L115.521 -0.62207 115.3838 -0.563477 115.208 -0.563477 c114.8433 -0.563477 114.856 -0.785156 114.856 -1.09766 c114.856 -1.56641 L115.5859 -1.56641 L115.5859 -1.95801 L114.856 -1.95801 L114.856 -5.02637 L114.4131 -5.02637 L114.4131 -1.95801 L113.957 -1.95801 L113.957 -1.56641 L114.4131 -1.56641 L114.4131 -1.02539 lb*U*u119.8486 -4.32227 m119.8486 -4.88965 119.8164 -5.3584 119.5361 -5.74316 c119.2427 -6.14063 118.728 -6.375 118.0698 -6.375 c117.0732 -6.375 116.5908 -5.9707 116.2847 -5.2998 c116.7671 -5.2998 L117.0273 -5.75586 117.4316 -5.9707 118.0439 -5.9707 c118.6172 -5.9707 119.041 -5.7627 119.2495 -5.38477 c119.3799 -5.14355 119.3994 -4.89648 119.3994 -4.62891 c119.3994 -4.36816 L119.0537 -4.80469 118.5522 -5.02637 118.0112 -5.02637 c117.0537 -5.02637 116.2393 -4.29688 116.2393 -3.27344 c116.2393 -2.24414 117.0928 -1.47559 118.0112 -1.47559 c118.624 -1.47559 119.0342 -1.73633 119.3994 -2.16602 c119.3994 -1.56641 L119.8486 -1.56641 L119.8486 -4.32227 lb1 D116.6953 -3.2998 m116.6953 -3.99023 117.1841 -4.59668 118.0962 -4.59668 c118.8521 -4.59668 119.4189 -4.0752 119.4189 -3.26758 c119.4189 -2.43359 118.7998 -1.90527 118.083 -1.90527 c117.3076 -1.90527 116.6953 -2.49805 116.6953 -3.2998 cb*U*u0 D121.3633 -0.276367 m121.8062 -0.276367 L121.8062 -1.56641 L122.5166 -1.56641 L122.5166 -1.95801 L121.8062 -1.95801 L121.8062 -5.02637 L121.3633 -5.02637 L121.3633 -1.95801 L120.751 -1.95801 L120.751 -1.56641 L121.3633 -1.56641 L121.3633 -0.276367 lb*U*u123.6323 -2.06836 m123.8926 -1.69043 124.1729 -1.47559 124.5249 -1.47559 c124.7266 -1.47559 124.8311 -1.54102 124.9224 -1.59277 c124.6875 -1.9707 L124.6357 -1.94434 124.5508 -1.90527 124.4531 -1.90527 c124.1274 -1.90527 123.834 -2.18555 123.7036 -2.66113 c123.645 -2.88281 123.6323 -3.24121 123.6323 -3.70996 c123.6323 -5.02637 L123.1631 -5.02637 L123.1631 -1.56641 L123.6323 -1.56641 L123.6323 -2.06836 lb*U*u128.4746 -1.56641 m128.9102 -1.56641 L128.9102 -5.02637 L128.4746 -5.02637 L128.4746 -4.43359 L128.0957 -4.88965 127.6211 -5.11133 127.0801 -5.11133 c126.0698 -5.11133 125.3076 -4.27051 125.3076 -3.28711 c125.3076 -2.30273 126.0894 -1.47559 127.0928 -1.47559 c127.6533 -1.47559 128.1289 -1.7168 128.4746 -2.19824 C128.4746 -1.56641 lb1 D125.7637 -3.2998 m125.7637 -4.04883 126.3501 -4.70703 127.125 -4.70703 c127.8359 -4.70703 128.5068 -4.17285 128.5068 -3.3125 c128.5068 -2.51172 127.9072 -1.90527 127.1318 -1.90527 c126.3369 -1.90527 125.7637 -2.55664 125.7637 -3.2998 cb*U*u0 D133.0967 -4.43359 m132.7188 -4.88965 132.2432 -5.11133 131.7031 -5.11133 c130.6924 -5.11133 129.9297 -4.27051 129.9297 -3.28711 c129.9297 -2.30273 130.7119 -1.47559 131.7148 -1.47559 c132.2754 -1.47559 132.752 -1.7168 133.0967 -2.19824 c133.0967 -0.231445 L133.54 -0.231445 L133.54 -5.02637 L133.0967 -5.02637 L133.0967 -4.43359 lb1 D130.3867 -3.2998 m130.3867 -4.04883 130.9727 -4.70703 131.748 -4.70703 c132.459 -4.70703 133.123 -4.17285 133.123 -3.3125 c133.123 -2.51172 132.5293 -1.90527 131.7539 -1.90527 c130.96 -1.90527 130.3867 -2.55664 130.3867 -3.2998 cb*U*u0 D135.2373 -0.504883 m135.2373 -0.707031 135.0684 -0.875977 134.8652 -0.875977 c134.6641 -0.875977 134.501 -0.707031 134.501 -0.504883 c134.501 -0.295898 134.6699 -0.139648 134.8652 -0.139648 c135.0684 -0.139648 135.2373 -0.302734 135.2373 -0.504883 cb134.6504 -1.56641 m135.0938 -1.56641 L135.0938 -5.02637 L134.6504 -5.02637 L134.6504 -1.56641 lb*U*u136.6191 -2.18555 m136.9785 -1.7168 137.4082 -1.47559 137.916 -1.47559 c138.6719 -1.47559 139.2002 -1.99707 139.2002 -3.08496 c139.2002 -5.02637 L138.7568 -5.02637 L138.7568 -3.14355 L138.7568 -2.3291 138.5029 -1.87891 137.832 -1.87891 c137.4609 -1.87891 137.1543 -2.04199 136.9199 -2.34863 c136.6592 -2.6875 136.6191 -3.02637 136.6191 -3.57324 c136.6191 -5.02637 L136.1768 -5.02637 L136.1768 -1.56641 L136.6191 -1.56641 L136.6191 -2.18555 lb*U*u143.75 -4.32227 m143.75 -4.88965 143.7188 -5.3584 143.4375 -5.74316 c143.1445 -6.14063 142.6299 -6.375 141.9717 -6.375 c140.9746 -6.375 140.4922 -5.9707 140.1865 -5.2998 c140.6689 -5.2998 L140.9297 -5.75586 141.334 -5.9707 141.9453 -5.9707 c142.5195 -5.9707 142.9434 -5.7627 143.1514 -5.38477 c143.2813 -5.14355 143.3008 -4.89648 143.3008 -4.62891 c143.3008 -4.36816 L142.9551 -4.80469 142.4541 -5.02637 141.9131 -5.02637 c140.9551 -5.02637 140.1406 -4.29688 140.1406 -3.27344 c140.1406 -2.24414 140.9941 -1.47559 141.9131 -1.47559 c142.5254 -1.47559 142.9355 -1.73633 143.3008 -2.16602 c143.3008 -1.56641 L143.75 -1.56641 L143.75 -4.32227 lb1 D140.5977 -3.2998 m140.5977 -3.99023 141.0859 -4.59668 141.998 -4.59668 c142.7539 -4.59668 143.3203 -4.0752 143.3203 -3.26758 c143.3203 -2.43359 142.7012 -1.90527 141.9844 -1.90527 c141.209 -1.90527 140.5977 -2.49805 140.5977 -3.2998 cb*U*u0 D145.748 -4.71973 m145.748 -4.94141 145.5713 -5.11719 145.3564 -5.11719 c145.1348 -5.11719 144.9648 -4.93555 144.9648 -4.71973 c144.9648 -4.50488 145.1416 -4.32227 145.3564 -4.32227 c145.5645 -4.32227 145.748 -4.49902 145.748 -4.71973 cb*U*u150.1992 -4.3291 m149.8594 -4.84375 149.2734 -5.11133 148.5762 -5.11133 c147.4355 -5.11133 146.6738 -4.29004 146.6738 -3.32617 c146.6738 -2.30957 147.4688 -1.47559 148.6094 -1.47559 c149.2734 -1.47559 149.8789 -1.74902 150.1992 -2.2832 c149.8398 -2.50488 L149.5332 -2.10059 149.1104 -1.90527 148.5898 -1.90527 c147.709 -1.90527 147.1299 -2.55078 147.1299 -3.29297 c147.1299 -4.04883 147.7031 -4.70703 148.5957 -4.70703 c149.0977 -4.70703 149.5137 -4.50488 149.8398 -4.10156 C150.1992 -4.3291 lb*U*u154.6641 -3.30664 m154.6641 -4.29004 153.9023 -5.11719 152.8594 -5.11719 c151.8174 -5.11719 151.0547 -4.29004 151.0547 -3.30664 c151.0547 -2.31543 151.8242 -1.47559 152.8594 -1.47559 c153.8955 -1.47559 154.6641 -2.31543 154.6641 -3.30664 cb1 D151.5117 -3.3125 m151.5117 -4.06836 152.0781 -4.6875 152.8594 -4.6875 c153.6348 -4.6875 154.209 -4.06836 154.209 -3.3125 c154.209 -2.54395 153.5957 -1.90527 152.8594 -1.90527 c152.1172 -1.90527 151.5117 -2.54395 151.5117 -3.3125 cb*U*u0 D158.4473 -5.02637 m158.0039 -5.02637 L158.0039 -3.25391 L158.0039 -2.9873 157.9775 -2.76563 157.9707 -2.60938 c157.9512 -2.23145 157.6445 -1.90527 157.1895 -1.90527 c156.8828 -1.90527 156.5762 -2.05566 156.3809 -2.30957 c156.1338 -2.62891 156.0879 -3.03906 156.0879 -3.56055 c156.0879 -5.02637 L155.6445 -5.02637 L155.6445 -1.56641 L156.0879 -1.56641 L156.0879 -2.15918 L156.3945 -1.7168 156.7793 -1.47559 157.2734 -1.47559 c157.8018 -1.47559 158.1797 -1.74902 158.3682 -2.30957 c158.6748 -1.75586 159.1309 -1.47559 159.6387 -1.47559 c160.3555 -1.47559 160.8184 -1.99023 160.8184 -2.97363 c160.8184 -5.02637 L160.375 -5.02637 L160.375 -3.13672 L160.375 -2.88281 160.3428 -2.68066 160.3359 -2.55078 c160.3164 -2.24414 160.0234 -1.90527 159.5547 -1.90527 c159.124 -1.90527 158.7461 -2.16602 158.5703 -2.60938 c158.459 -2.88965 158.4473 -3.19531 158.4473 -3.51465 C158.4473 -5.02637 lb*UUu*u0.1 0.11 0.49 0 k1 w75.2671 44.7021 m76.4297 44.7021 L76.9551 44.7021 77.3472 44.668 77.5923 44.5762 c78.1035 44.3799 78.4189 43.9326 78.4189 43.3652 c78.4189 42.8887 78.1948 42.4893 77.8374 42.2656 c77.4805 42.041 76.9619 42.0127 76.2686 42.0127 c75.7715 42.0127 L75.7715 39.6738 L75.2671 39.6738 L75.2671 44.7021 lf1 D75.7715 44.2119 m75.7715 42.5029 L76.0586 42.4961 76.3457 42.5029 76.605 42.5029 c77.0391 42.5029 77.375 42.5313 77.5991 42.7139 c77.7744 42.8535 77.8936 43.1123 77.8936 43.3652 c77.8936 43.624 77.7676 43.876 77.5781 44.0234 c77.354 44.1914 77.0532 44.2119 76.6606 44.2119 C75.7715 44.2119 lf*U*u0 D79.6494 42.8535 m79.9292 43.2598 80.2305 43.4912 80.6089 43.4912 c80.8257 43.4912 80.938 43.4209 81.0361 43.3652 c80.7837 42.959 L80.728 42.9863 80.6367 43.0283 80.5317 43.0283 c80.1816 43.0283 79.8662 42.7275 79.7261 42.2158 c79.6631 41.9785 79.6494 41.5928 79.6494 41.0889 c79.6494 39.6738 L79.145 39.6738 L79.145 43.3926 L79.6494 43.3926 L79.6494 42.8535 lf*U*u85.1182 41.5225 m85.1182 40.4648 84.2988 39.5762 83.1782 39.5762 c82.0576 39.5762 81.2383 40.4648 81.2383 41.5225 c81.2383 42.5869 82.0645 43.4912 83.1782 43.4912 c84.2915 43.4912 85.1182 42.5869 85.1182 41.5225 cf1 D81.7285 41.5156 m81.7285 40.7031 82.3374 40.0381 83.1782 40.0381 c84.0117 40.0381 84.6279 40.7031 84.6279 41.5156 c84.6279 42.3418 83.9697 43.0283 83.1782 43.0283 c82.3799 43.0283 81.7285 42.3418 81.7285 41.5156 cf*U*u0 D86.2222 43.9746 m86.2222 44.5762 86.3691 44.9336 86.9785 44.9336 c87.1816 44.9336 87.3706 44.8779 87.5249 44.8291 c87.5249 44.3594 L87.4131 44.4082 87.2656 44.4717 87.0767 44.4717 c86.6846 44.4717 86.6987 44.2334 86.6987 43.8975 c86.6987 43.3926 L87.4829 43.3926 L87.4829 42.9727 L86.6987 42.9727 L86.6987 39.6738 L86.2222 39.6738 L86.2222 42.9727 L85.7319 42.9727 L85.7319 43.3926 L86.2222 43.3926 L86.2222 43.9746 lf*U*u88.5112 41.4951 m88.5322 40.6406 89.1133 40.0166 89.9116 40.0166 c90.689 40.0166 91.0605 40.458 91.3335 40.9063 c91.7329 40.6963 L91.3545 39.9541 90.7734 39.583 89.9609 39.583 c88.728 39.583 88.021 40.5283 88.021 41.5225 c88.021 42.5381 88.77 43.4912 89.9326 43.4912 c90.9902 43.4912 91.8447 42.7275 91.8589 41.4951 C88.5112 41.4951 lf1 D91.3335 41.915 m91.1372 42.6855 90.584 43.0283 89.9399 43.0283 c89.2744 43.0283 88.7773 42.6719 88.5601 41.915 C91.3335 41.915 lf*U*u0 D92.6968 40.4512 m92.9346 40.1855 93.1938 40.0381 93.4741 40.0381 c93.8384 40.0381 94.1606 40.3037 94.1606 40.6543 c94.1606 40.8711 94.0342 41.0742 93.8521 41.1729 c92.9976 41.6484 92.5635 41.8516 92.5635 42.5029 c92.5635 43.0918 93.019 43.4912 93.5859 43.4912 c93.9922 43.4912 94.3003 43.2949 94.6157 42.9863 c94.3076 42.6719 L94.0835 42.8887 93.8594 43.0283 93.5581 43.0283 c93.25 43.0283 92.9976 42.8115 92.9976 42.5313 c92.9976 42.3418 93.1167 42.1318 93.2852 42.0342 c94.1396 41.5371 94.6157 41.3477 94.6157 40.6758 c94.6157 40.0938 94.1675 39.5762 93.4951 39.5762 c93.082 39.5762 92.6616 39.7646 92.3955 40.1084 C92.6968 40.4512 lf*U*u95.4131 40.4512 m95.6509 40.1855 95.9102 40.0381 96.1904 40.0381 c96.5547 40.0381 96.877 40.3037 96.877 40.6543 c96.877 40.8711 96.7505 41.0742 96.5684 41.1729 c95.7144 41.6484 95.2798 41.8516 95.2798 42.5029 c95.2798 43.0918 95.7354 43.4912 96.3022 43.4912 c96.7085 43.4912 97.0166 43.2949 97.332 42.9863 c97.0239 42.6719 L96.7998 42.8887 96.5757 43.0283 96.2744 43.0283 c95.9663 43.0283 95.7144 42.8115 95.7144 42.5313 c95.7144 42.3418 95.833 42.1318 96.0015 42.0342 c96.856 41.5371 97.332 41.3477 97.332 40.6758 c97.332 40.0938 96.8838 39.5762 96.2114 39.5762 c95.7983 39.5762 95.3779 39.7646 95.1118 40.1084 C95.4131 40.4512 lf*U*u98.7451 44.5342 m98.7451 44.3174 98.563 44.1348 98.3457 44.1348 c98.1289 44.1348 97.9536 44.3174 97.9536 44.5342 c97.9536 44.7588 98.1357 44.9268 98.3457 44.9268 c98.563 44.9268 98.7451 44.752 98.7451 44.5342 cf98.1147 43.3926 m98.5908 43.3926 L98.5908 39.6738 L98.1147 39.6738 L98.1147 43.3926 lf*U*u103.2827 41.5225 m103.2827 40.4648 102.4634 39.5762 101.3428 39.5762 c100.2222 39.5762 99.4028 40.4648 99.4028 41.5225 c99.4028 42.5869 100.229 43.4912 101.3428 43.4912 c102.4561 43.4912 103.2827 42.5869 103.2827 41.5225 cf1 D99.8931 41.5156 m99.8931 40.7031 100.5024 40.0381 101.3428 40.0381 c102.1763 40.0381 102.7925 40.7031 102.7925 41.5156 c102.7925 42.3418 102.1343 43.0283 101.3428 43.0283 c100.5444 43.0283 99.8931 42.3418 99.8931 41.5156 cf*U*u0 D104.6392 42.7275 m105.0239 43.2314 105.4863 43.4912 106.0327 43.4912 c106.8452 43.4912 107.4126 42.9307 107.4126 41.7607 c107.4126 39.6738 L106.936 39.6738 L106.936 41.6982 L106.936 42.5732 106.6631 43.0566 105.9414 43.0566 c105.5425 43.0566 105.2134 42.8818 104.9609 42.5527 c104.6812 42.1885 104.6392 41.8242 104.6392 41.2354 c104.6392 39.6738 L104.1626 39.6738 L104.1626 43.3926 L104.6392 43.3926 L104.6392 42.7275 lf*U*u111.6685 43.3926 m112.1377 43.3926 L112.1377 39.6738 L111.6685 39.6738 L111.6685 40.3115 L111.2622 39.8213 110.751 39.583 110.1694 39.583 c109.084 39.583 108.2646 40.4863 108.2646 41.5439 c108.2646 42.6016 109.105 43.4912 110.1836 43.4912 c110.7861 43.4912 111.2974 43.2314 111.6685 42.7139 C111.6685 43.3926 lf1 D108.7549 41.5303 m108.7549 40.7246 109.3853 40.0166 110.2188 40.0166 c110.9819 40.0166 111.7036 40.5918 111.7036 41.5156 c111.7036 42.377 111.0591 43.0283 110.2256 43.0283 c109.3711 43.0283 108.7549 42.3281 108.7549 41.5303 cf*U*u0 D113.1436 44.8291 m113.6196 44.8291 L113.6196 39.6738 L113.1436 39.6738 L113.1436 44.8291 lf*U*u116.1323 44.2119 m116.1323 44.7021 L118.8916 44.7021 L118.8916 44.2119 L117.771 44.2119 L117.771 39.6738 L117.2666 39.6738 L117.2666 44.2119 L116.1323 44.2119 lf*U*u119.6396 42.8535 m119.9194 43.2598 120.2207 43.4912 120.5991 43.4912 c120.8159 43.4912 120.9282 43.4209 121.0264 43.3652 c120.7739 42.959 L120.7183 42.9863 120.627 43.0283 120.522 43.0283 c120.1719 43.0283 119.8564 42.7275 119.7163 42.2158 c119.6533 41.9785 119.6396 41.5928 119.6396 41.0889 c119.6396 39.6738 L119.1353 39.6738 L119.1353 43.3926 L119.6396 43.3926 L119.6396 42.8535 lf*U*u124.667 43.3926 m125.1362 43.3926 L125.1362 39.6738 L124.667 39.6738 L124.667 40.3115 L124.2607 39.8213 123.7495 39.583 123.168 39.583 c122.0825 39.583 121.2632 40.4863 121.2632 41.5439 c121.2632 42.6016 122.1035 43.4912 123.1821 43.4912 c123.7847 43.4912 124.2959 43.2314 124.667 42.7139 C124.667 43.3926 lf1 D121.7534 41.5303 m121.7534 40.7246 122.3838 40.0166 123.2173 40.0166 c123.9805 40.0166 124.7021 40.5918 124.7021 41.5156 c124.7021 42.377 124.0576 43.0283 123.2241 43.0283 c122.3696 43.0283 121.7534 42.3281 121.7534 41.5303 cf*U*u0 D129.4551 40.3115 m129.0488 39.8213 128.5371 39.583 127.957 39.583 c126.8706 39.583 126.0513 40.4863 126.0513 41.5439 c126.0513 42.6016 126.8916 43.4912 127.9707 43.4912 c128.5723 43.4912 129.084 43.2314 129.4551 42.7139 c129.4551 44.8291 L129.9316 44.8291 L129.9316 39.6738 L129.4551 39.6738 L129.4551 40.3115 lf1 D126.5415 41.5303 m126.5415 40.7246 127.1719 40.0166 128.0059 40.0166 c128.7695 40.0166 129.4834 40.5918 129.4834 41.5156 c129.4834 42.377 128.8457 43.0283 128.0117 43.0283 c127.1582 43.0283 126.5415 42.3281 126.5415 41.5303 cf*U*u0 D131.3223 41.4951 m131.3438 40.6406 131.9248 40.0166 132.7227 40.0166 c133.5 40.0166 133.8721 40.458 134.1445 40.9063 c134.5449 40.6963 L134.166 39.9541 133.585 39.583 132.7725 39.583 c131.5391 39.583 130.832 40.5283 130.832 41.5225 c130.832 42.5381 131.582 43.4912 132.7441 43.4912 c133.8018 43.4912 134.6563 42.7275 134.6699 41.4951 C131.3223 41.4951 lf1 D134.1445 41.915 m133.9492 42.6855 133.3955 43.0283 132.752 43.0283 c132.0859 43.0283 131.5889 42.6719 131.3711 41.915 C134.1445 41.915 lf*U*u0 D135.873 42.8535 m136.1523 43.2598 136.4531 43.4912 136.832 43.4912 c137.0488 43.4912 137.1611 43.4209 137.2598 43.3652 c137.0068 42.959 L136.9512 42.9863 136.8594 43.0283 136.7549 43.0283 c136.4043 43.0283 136.0898 42.7275 135.9492 42.2158 c135.8867 41.9785 135.873 41.5928 135.873 41.0889 c135.873 39.6738 L135.3682 39.6738 L135.3682 43.3926 L135.873 43.3926 L135.873 42.8535 lf*U*u140.9766 39.5547 m140.1426 39.5547 139.6943 40.0938 139.6943 40.7178 c139.6943 41.3828 140.1777 41.8516 140.8984 42.4268 c140.5 42.9023 140.2539 43.2246 140.2539 43.6104 c140.2539 44.1426 140.752 44.5137 141.3682 44.5137 c142.0195 44.5137 142.4678 44.1211 142.4678 43.6025 c142.4678 43.1758 142.1455 42.7979 141.5996 42.335 c142.4395 41.4385 142.874 41.0254 142.8877 41.0117 c143.1113 41.2002 143.3291 41.3828 143.4971 41.5371 c143.834 41.1729 L143.6582 41.0186 143.4629 40.8438 143.2451 40.668 c143.5742 40.3184 143.9102 40.0098 144.1973 39.6738 c143.4971 39.6738 L143.1543 40.0449 142.9297 40.2549 142.8457 40.3467 c142.2578 39.9053 141.7539 39.5547 140.9766 39.5547 cf1 D140.1846 40.7451 m140.1846 40.3887 140.5205 40.0166 141.0254 40.0166 c141.4873 40.0166 141.9492 40.2969 142.5098 40.6963 c142.1523 41.0605 141.7109 41.4883 141.2285 42.041 c140.5908 41.5576 140.1846 41.1865 140.1846 40.7451 cf141.9775 43.6104 m141.9775 43.8555 141.7109 44.0508 141.3535 44.0508 c141.0527 44.0508 140.7441 43.8828 140.7441 43.6025 c140.7441 43.4072 140.9336 43.1123 141.291 42.7139 c141.7393 43.0635 141.9775 43.3789 141.9775 43.6104 cf*U*u0 D148.8516 43.6943 m148.5781 44.0508 148.3398 44.3105 147.9258 44.3105 c147.4922 44.3105 147.2471 44.002 147.2471 43.6729 c147.2471 43.3994 147.4082 43.1123 147.6953 42.8955 c148.6406 42.1953 149.334 41.7119 149.334 40.8994 c149.334 40.1924 148.7383 39.5479 147.9199 39.5479 c147.2266 39.5479 146.7715 39.9326 146.3994 40.6123 c146.8262 40.8711 L147.1279 40.3184 147.4922 40.0381 147.877 40.0381 c148.4023 40.0381 148.8086 40.4229 148.8086 40.8926 c148.8086 41.4453 148.291 41.7607 147.1484 42.6855 c146.9111 42.875 146.7217 43.2734 146.7217 43.6523 c146.7217 44.3457 147.2617 44.8291 147.9404 44.8291 c148.5566 44.8291 148.9277 44.457 149.2578 44.0088 C148.8516 43.6943 lf*U*u150.7539 44.7793 m151.2305 44.7793 L151.2305 43.3926 L151.9941 43.3926 L151.9941 42.9727 L151.2305 42.9727 L151.2305 39.6738 L150.7539 39.6738 L150.7539 42.9727 L150.0957 42.9727 L150.0957 43.3926 L150.7539 43.3926 L150.7539 44.7793 lf*U*u153.0156 42.8535 m153.2949 43.2598 153.5957 43.4912 153.9746 43.4912 c154.1914 43.4912 154.3037 43.4209 154.4023 43.3652 c154.1494 42.959 L154.0938 42.9863 154.002 43.0283 153.8975 43.0283 c153.5469 43.0283 153.2324 42.7275 153.0918 42.2158 c153.0293 41.9785 153.0156 41.5928 153.0156 41.0889 c153.0156 39.6738 L152.5107 39.6738 L152.5107 43.3926 L153.0156 43.3926 L153.0156 42.8535 lf*U*u158.043 43.3926 m158.5117 43.3926 L158.5117 39.6738 L158.043 39.6738 L158.043 40.3115 L157.6367 39.8213 157.125 39.583 156.543 39.583 c155.458 39.583 154.6387 40.4863 154.6387 41.5439 c154.6387 42.6016 155.4785 43.4912 156.5576 43.4912 c157.1602 43.4912 157.6719 43.2314 158.043 42.7139 C158.043 43.3926 lf1 D155.1289 41.5303 m155.1289 40.7246 155.7598 40.0166 156.5928 40.0166 c157.3555 40.0166 158.0781 40.5918 158.0781 41.5156 c158.0781 42.377 157.4336 43.0283 156.5996 43.0283 c155.7451 43.0283 155.1289 42.3281 155.1289 41.5303 cf*U*u0 D160.0156 44.7793 m160.4912 44.7793 L160.4912 43.3926 L161.2549 43.3926 L161.2549 42.9727 L160.4912 42.9727 L160.4912 39.6738 L160.0156 39.6738 L160.0156 42.9727 L159.3574 42.9727 L159.3574 43.3926 L160.0156 43.3926 L160.0156 44.7793 lf*U*u162.2764 41.4951 m162.2969 40.6406 162.8789 40.0166 163.6768 40.0166 c164.4551 40.0166 164.8262 40.458 165.0986 40.9063 c165.498 40.6963 L165.1191 39.9541 164.5391 39.583 163.7266 39.583 c162.4932 39.583 161.7861 40.5283 161.7861 41.5225 c161.7861 42.5381 162.5352 43.4912 163.6973 43.4912 c164.7559 43.4912 165.6094 42.7275 165.624 41.4951 C162.2764 41.4951 lf1 D165.0986 41.915 m164.9023 42.6855 164.3496 43.0283 163.7051 43.0283 c163.0391 43.0283 162.543 42.6719 162.3252 41.915 C165.0986 41.915 lf*U*u0 D170.2012 40.4307 m170.2012 39.8213 170.167 39.3164 169.8652 38.9033 c169.5508 38.4766 168.9971 38.2236 168.2891 38.2236 c167.2188 38.2236 166.6992 38.6582 166.3711 39.3799 c166.8887 39.3799 L167.1689 38.8896 167.6035 38.6582 168.2617 38.6582 c168.8779 38.6582 169.334 38.8828 169.5576 39.2891 c169.6973 39.5479 169.7188 39.8135 169.7188 40.1006 c169.7188 40.3809 L169.3477 39.9121 168.8086 39.6738 168.2266 39.6738 c167.1973 39.6738 166.3223 40.458 166.3223 41.5576 c166.3223 42.6641 167.2393 43.4912 168.2266 43.4912 c168.8848 43.4912 169.3262 43.2109 169.7188 42.748 c169.7188 43.3926 L170.2012 43.3926 L170.2012 40.4307 lf1 D166.8125 41.5303 m166.8125 40.7871 167.3379 40.1357 168.3184 40.1357 c169.1309 40.1357 169.7402 40.6963 169.7402 41.5645 c169.7402 42.4609 169.0742 43.0283 168.3037 43.0283 c167.4707 43.0283 166.8125 42.3916 166.8125 41.5303 cf*U*u0 D171.7891 44.5342 m171.7891 44.3174 171.6074 44.1348 171.3896 44.1348 c171.1729 44.1348 170.998 44.3174 170.998 44.5342 c170.998 44.7588 171.1797 44.9268 171.3896 44.9268 c171.6074 44.9268 171.7891 44.752 171.7891 44.5342 cf171.1582 43.3926 m171.6348 43.3926 L171.6348 39.6738 L171.1582 39.6738 L171.1582 43.3926 lf*U*u172.5723 40.4512 m172.8105 40.1855 173.0703 40.0381 173.3496 40.0381 c173.7148 40.0381 174.0371 40.3037 174.0371 40.6543 c174.0371 40.8711 173.9102 41.0742 173.7285 41.1729 c172.873 41.6484 172.4395 41.8516 172.4395 42.5029 c172.4395 43.0918 172.8945 43.4912 173.4619 43.4912 c173.8682 43.4912 174.1758 43.2949 174.4922 42.9863 c174.1836 42.6719 L173.959 42.8887 173.7354 43.0283 173.4336 43.0283 c173.126 43.0283 172.873 42.8115 172.873 42.5313 c172.873 42.3418 172.9922 42.1318 173.1611 42.0342 c174.0156 41.5371 174.4922 41.3477 174.4922 40.6758 c174.4922 40.0938 174.043 39.5762 173.3711 39.5762 c172.958 39.5762 172.5371 39.7646 172.2715 40.1084 C172.5723 40.4512 lf*U*u175.7646 44.7793 m176.2402 44.7793 L176.2402 43.3926 L177.0039 43.3926 L177.0039 42.9727 L176.2402 42.9727 L176.2402 39.6738 L175.7646 39.6738 L175.7646 42.9727 L175.1064 42.9727 L175.1064 43.3926 L175.7646 43.3926 L175.7646 44.7793 lf*U*u0 0 0 0 k106.7817 29.9287 m107.188 29.6621 L105.8364 27.6025 L105.9556 27.6445 106.1099 27.6943 106.3477 27.6943 c107.1812 27.6943 107.7764 27.0078 107.7764 26.1953 c107.7764 25.2568 107.0342 24.6475 106.2075 24.6475 c105.2974 24.6475 104.6807 25.376 104.6807 26.167 c104.6807 26.6572 104.8911 27.1201 105.248 27.6523 C106.7817 29.9287 lf1 D105.1709 26.1953 m105.1709 25.6143 105.6475 25.1377 106.2285 25.1377 c106.8101 25.1377 107.2861 25.6143 107.2861 26.1953 c107.2861 26.7764 106.8169 27.2529 106.2285 27.2529 c105.6475 27.2529 105.1709 26.7764 105.1709 26.1953 cf*U*u0 D109.9736 29.4375 m109.4834 29.4375 109.2031 29.165 109.0068 28.6396 c108.4956 28.6396 L108.6851 29.501 109.2661 29.9287 109.9663 29.9287 c110.7788 29.9287 111.4165 29.3467 111.4165 28.6328 c111.4165 28.2051 111.1992 27.8555 110.772 27.6025 c111.3672 27.3574 111.6895 26.8252 111.6895 26.2725 c111.6895 25.4316 111.0239 24.6475 109.9805 24.6475 c109.1123 24.6475 108.5098 25.1445 108.3276 26.1182 c108.8247 26.1182 L108.9932 25.4805 109.3364 25.1377 109.9878 25.1377 c110.7231 25.1377 111.1992 25.6563 111.1992 26.2373 c111.1992 26.6084 110.9893 26.9512 110.6387 27.1406 c110.3516 27.2949 110.0508 27.3154 109.7285 27.3301 c109.7285 27.792 L110.5269 27.8408 110.8911 28.1699 110.8911 28.6328 c110.8911 29.0596 110.52 29.4375 109.9736 29.4375 cf*U*u114.5376 29.9287 m114.9438 29.6621 L113.5923 27.6025 L113.7114 27.6445 113.8657 27.6943 114.1035 27.6943 c114.937 27.6943 115.5322 27.0078 115.5322 26.1953 c115.5322 25.2568 114.79 24.6475 113.9634 24.6475 c113.0532 24.6475 112.4365 25.376 112.4365 26.167 c112.4365 26.6572 112.647 27.1201 113.0039 27.6523 C114.5376 29.9287 lf1 D112.9268 26.1953 m112.9268 25.6143 113.4033 25.1377 113.9844 25.1377 c114.5659 25.1377 115.042 25.6143 115.042 26.1953 c115.042 26.7764 114.5728 27.2529 113.9844 27.2529 c113.4033 27.2529 112.9268 26.7764 112.9268 26.1953 cf*U*u0 D116.0625 26.875 m117.9463 26.875 L117.9463 26.4541 L116.0625 26.4541 L116.0625 26.875 lf*U*u120.2983 26.8467 m120.8867 27.4844 121.23 27.8691 121.23 28.415 c121.23 28.9971 120.7534 29.4658 120.144 29.4658 c119.5068 29.4658 119.0376 28.9971 118.9746 28.2266 c118.4912 28.2266 L118.5195 29.207 119.2266 29.9287 120.165 29.9287 c121.0757 29.9287 121.7202 29.2559 121.7202 28.415 c121.7202 27.7295 121.314 27.2529 120.7183 26.6084 c119.4648 25.2637 L121.79 25.2637 L121.79 24.7734 L118.3721 24.7734 L120.2983 26.8467 lf*U*u124.0083 29.9287 m124.8345 29.9287 125.4438 29.3115 125.4438 28.6045 c125.4438 28.1426 125.2129 27.792 124.7363 27.5332 c125.3457 27.2246 125.6821 26.833 125.6821 26.2158 c125.6821 25.418 125.1006 24.6543 123.9731 24.6543 c122.8735 24.6543 122.2852 25.3965 122.2852 26.1738 c122.2852 26.8184 122.6494 27.2246 123.2588 27.5332 c122.7544 27.792 122.5093 28.1846 122.5093 28.6182 c122.5093 29.3115 123.1538 29.9287 124.0083 29.9287 cf1 D122.7754 26.1602 m122.7754 25.6064 123.2305 25.1162 123.98 25.1162 c124.7153 25.1162 125.1919 25.6279 125.1919 26.209 c125.1919 26.7412 124.6943 27.2813 124.0083 27.2813 c123.2866 27.2813 122.7754 26.7275 122.7754 26.1602 cf123.0347 28.6113 m123.0347 28.1426 123.5039 27.7432 124.001 27.7432 c124.5684 27.7432 124.9536 28.1982 124.9536 28.626 c124.9536 29.0107 124.6245 29.4375 123.9873 29.4375 c123.4409 29.4375 123.0347 29.0664 123.0347 28.6113 cf*U*u0 D127.8867 29.9287 m128.7129 29.9287 129.3223 29.3115 129.3223 28.6045 c129.3223 28.1426 129.0908 27.792 128.6143 27.5332 c129.2236 27.2246 129.5605 26.833 129.5605 26.2158 c129.5605 25.418 128.9785 24.6543 127.8516 24.6543 c126.7515 24.6543 126.1631 25.3965 126.1631 26.1738 c126.1631 26.8184 126.5273 27.2246 127.1367 27.5332 c126.6323 27.792 126.3872 28.1846 126.3872 28.6182 c126.3872 29.3115 127.0313 29.9287 127.8867 29.9287 cf1 D126.6533 26.1602 m126.6533 25.6064 127.1084 25.1162 127.8574 25.1162 c128.5938 25.1162 129.0703 25.6279 129.0703 26.209 c129.0703 26.7412 128.5723 27.2813 127.8867 27.2813 c127.1641 27.2813 126.6533 26.7275 126.6533 26.1602 cf126.9126 28.6113 m126.9126 28.1426 127.3818 27.7432 127.8789 27.7432 c128.4463 27.7432 128.832 28.1982 128.832 28.626 c128.832 29.0107 128.502 29.4375 127.8652 29.4375 c127.3184 29.4375 126.9126 29.0664 126.9126 28.6113 cf*U*u0 D130.0195 26.875 m131.9043 26.875 L131.9043 26.4541 L130.0195 26.4541 L130.0195 26.875 lf*U*u134.0107 29.4375 m133.5205 29.4375 133.2402 29.165 133.0439 28.6396 c132.5332 28.6396 L132.7227 29.501 133.3027 29.9287 134.0039 29.9287 c134.8164 29.9287 135.4531 29.3467 135.4531 28.6328 c135.4531 28.2051 135.2363 27.8555 134.8086 27.6025 c135.4043 27.3574 135.7266 26.8252 135.7266 26.2725 c135.7266 25.4316 135.0605 24.6475 134.0176 24.6475 c133.1494 24.6475 132.5469 25.1445 132.3652 26.1182 c132.8613 26.1182 L133.0303 25.4805 133.373 25.1377 134.0254 25.1377 c134.7598 25.1377 135.2363 25.6563 135.2363 26.2373 c135.2363 26.6084 135.0264 26.9512 134.6758 27.1406 c134.3887 27.2949 134.0879 27.3154 133.7656 27.3301 c133.7656 27.792 L134.5645 27.8408 134.9277 28.1699 134.9277 28.6328 c134.9277 29.0596 134.5566 29.4375 134.0107 29.4375 cf*U*u138.9805 29.9287 m139.0859 29.9287 L139.0859 26.4336 L139.6953 26.4336 L139.6953 25.9434 L139.0859 25.9434 L139.0859 24.7734 L138.582 24.7734 L138.582 25.9434 L136.1797 25.9434 L138.9805 29.9287 lf1 D138.582 26.4336 m138.582 28.5205 L137.1035 26.4336 L138.582 26.4336 lf*U*u0 D141.2207 24.6475 m140.8066 24.9131 L142.166 26.9727 L142.0254 26.9307 141.8574 26.8818 141.6475 26.8818 c140.8145 26.8818 140.2256 27.5605 140.2256 28.3809 c140.2256 29.3115 140.9541 29.9287 141.7871 29.9287 c142.6982 29.9287 143.3145 29.207 143.3145 28.4082 c143.3145 27.9248 143.1035 27.4561 142.7471 26.9238 C141.2207 24.6475 lf1 D142.8242 28.3809 m142.8242 28.9619 142.3555 29.4375 141.7666 29.4375 c141.1855 29.4375 140.7158 28.9688 140.7158 28.3809 c140.7158 27.7988 141.1855 27.3232 141.7666 27.3232 c142.3477 27.3232 142.8242 27.7988 142.8242 28.3809 cf*U*u0 D146.3301 29.9287 m146.7363 29.6621 L145.3848 27.6025 L145.5039 27.6445 145.6582 27.6943 145.8965 27.6943 c146.7305 27.6943 147.3252 27.0078 147.3252 26.1953 c147.3252 25.2568 146.583 24.6475 145.7559 24.6475 c144.8457 24.6475 144.2295 25.376 144.2295 26.167 c144.2295 26.6572 144.4395 27.1201 144.7969 27.6523 C146.3301 29.9287 lf1 D144.7197 26.1953 m144.7197 25.6143 145.1963 25.1377 145.7773 25.1377 c146.3594 25.1377 146.835 25.6143 146.835 26.1953 c146.835 26.7764 146.3652 27.2529 145.7773 27.2529 c145.1963 27.2529 144.7197 26.7764 144.7197 26.1953 cf*U*u0 D0.1 0.11 0.49 0 k95.5894 10.5117 m95.1831 10.0215 94.6719 9.7832 94.0908 9.7832 c93.0049 9.7832 92.1855 10.6865 92.1855 11.7441 c92.1855 12.8018 93.0259 13.6914 94.1045 13.6914 c94.707 13.6914 95.2183 13.4316 95.5894 12.9141 c95.5894 15.0283 L96.0659 15.0283 L96.0659 9.87402 L95.5894 9.87402 L95.5894 10.5117 lf1 D92.6758 11.7305 m92.6758 10.9248 93.3062 10.2168 94.1396 10.2168 c94.9033 10.2168 95.6177 10.792 95.6177 11.7158 c95.6177 12.5771 94.98 13.2285 94.1465 13.2285 c93.2925 13.2285 92.6758 12.5283 92.6758 11.7305 cf*U*u0 D97.0928 13.5928 m97.5688 13.5928 L97.5688 9.31348 L97.5688 8.71875 97.3589 8.41016 96.9316 8.41016 c96.7212 8.41016 96.5396 8.47363 96.3921 8.5293 c96.3921 8.96387 L96.4761 8.92188 96.5884 8.87207 96.7354 8.87207 c96.9595 8.87207 97.0928 9.01953 97.0928 9.31348 C97.0928 13.5928 lf97.7231 14.7344 m97.7231 14.5176 97.541 14.335 97.3237 14.335 c97.1064 14.335 96.9316 14.5176 96.9316 14.7344 c96.9316 14.9521 97.1064 15.127 97.3237 15.127 c97.541 15.127 97.7231 14.9521 97.7231 14.7344 cf*U*u98.9897 14.9795 m99.4658 14.9795 L99.4658 13.5928 L100.2295 13.5928 L100.2295 13.1729 L99.4658 13.1729 L99.4658 9.87402 L98.9897 9.87402 L98.9897 13.1729 L98.3315 13.1729 L98.3315 13.5928 L98.9897 13.5928 L98.9897 14.9795 lf*U*u104.3184 13.292 m104.4097 13.7607 L104.7739 13.7607 L104.3813 11.5273 L104.3745 11.499 104.3604 11.4219 104.3604 11.3867 c104.3604 11.2744 104.4375 11.2188 104.5425 11.2188 c104.8296 11.2188 105.7402 11.7373 105.7402 12.8643 c105.7402 13.999 104.7808 14.8398 103.5269 14.8398 c102.1191 14.8398 101.1387 13.7607 101.1387 12.4863 c101.1387 11.1211 102.1821 10.084 103.583 10.084 c104.4097 10.084 104.8857 10.4482 105.3408 10.9033 c105.7051 10.9033 L105.2007 10.2734 104.6548 9.7832 103.5898 9.7832 c102.063 9.7832 100.8726 10.9453 100.8726 12.4238 c100.8726 13.957 102.021 15.1406 103.5479 15.1406 c104.8716 15.1406 106.0063 14.1748 106.0063 12.9414 c106.0063 11.5342 104.8086 10.918 104.2412 10.918 c103.9614 10.918 103.8491 11.0508 103.8423 11.2959 c103.6812 11.0928 103.394 10.9521 103.0996 10.9521 c102.4692 10.9521 101.9653 11.4219 101.9653 12.1924 c101.9653 13.0186 102.5327 13.7959 103.4219 13.7959 c103.9053 13.7959 104.1294 13.5928 104.3184 13.292 cf1 D104.1572 12.6543 m104.1572 13.0674 103.9194 13.4316 103.4712 13.4316 c102.8618 13.4316 102.4556 12.8574 102.4556 12.2549 c102.4556 11.7021 102.7847 11.3379 103.2681 11.3379 c103.8281 11.3379 104.1572 11.9541 104.1572 12.6543 cf*U*u0 D110.7095 11.7227 m110.7095 10.665 109.8901 9.77637 108.7695 9.77637 c107.6489 9.77637 106.8296 10.665 106.8296 11.7227 c106.8296 12.7881 107.6558 13.6914 108.7695 13.6914 c109.8828 13.6914 110.7095 12.7881 110.7095 11.7227 cf1 D107.3198 11.7158 m107.3198 10.9033 107.9292 10.2383 108.7695 10.2383 c109.603 10.2383 110.2192 10.9033 110.2192 11.7158 c110.2192 12.542 109.561 13.2285 108.7695 13.2285 c107.9712 13.2285 107.3198 12.542 107.3198 11.7158 cf*U*u0 D111.8135 14.1748 m111.8135 14.7764 111.9604 15.1338 112.5698 15.1338 c112.7729 15.1338 112.9624 15.0781 113.1162 15.0283 c113.1162 14.5596 L113.0044 14.6084 112.8569 14.6719 112.668 14.6719 c112.2759 14.6719 112.2896 14.4336 112.2896 14.0977 c112.2896 13.5928 L113.0742 13.5928 L113.0742 13.1729 L112.2896 13.1729 L112.2896 9.87402 L111.8135 9.87402 L111.8135 13.1729 L111.3232 13.1729 L111.3232 13.5928 L111.8135 13.5928 L111.8135 14.1748 lf*U*u117.4785 10.6309 m117.4785 10.0215 117.4438 9.5166 117.1426 9.10352 c116.8271 8.67676 116.2739 8.42383 115.5664 8.42383 c114.4951 8.42383 113.9766 8.8584 113.6475 9.58008 c114.166 9.58008 L114.4458 9.08984 114.8804 8.8584 115.5386 8.8584 c116.1548 8.8584 116.6104 9.08301 116.8345 9.48926 c116.9746 9.74805 116.9956 10.0137 116.9956 10.3008 c116.9956 10.5811 L116.624 10.1123 116.085 9.87402 115.5034 9.87402 c114.4741 9.87402 113.5986 10.6582 113.5986 11.7578 c113.5986 12.8643 114.5161 13.6914 115.5034 13.6914 c116.1621 13.6914 116.603 13.4111 116.9956 12.9482 c116.9956 13.5928 L117.4785 13.5928 L117.4785 10.6309 lf1 D114.0889 11.7305 m114.0889 10.9873 114.6143 10.3359 115.5947 10.3359 c116.4072 10.3359 117.0166 10.8965 117.0166 11.7646 c117.0166 12.6611 116.3511 13.2285 115.5806 13.2285 c114.7471 13.2285 114.0889 12.5918 114.0889 11.7305 cf*U*u0 D118.9258 14.9795 m119.4019 14.9795 L119.4019 13.5928 L120.1655 13.5928 L120.1655 13.1729 L119.4019 13.1729 L119.4019 9.87402 L118.9258 9.87402 L118.9258 13.1729 L118.2676 13.1729 L118.2676 13.5928 L118.9258 13.5928 L118.9258 14.9795 lf*U*u121.1865 13.0537 m121.4663 13.46 121.7676 13.6914 122.146 13.6914 c122.3628 13.6914 122.4751 13.6211 122.5732 13.5654 c122.3208 13.1592 L122.2651 13.1865 122.1738 13.2285 122.0688 13.2285 c121.7188 13.2285 121.4033 12.9277 121.2632 12.416 c121.2002 12.1787 121.1865 11.793 121.1865 11.2891 c121.1865 9.87402 L120.6821 9.87402 L120.6821 13.5928 L121.1865 13.5928 L121.1865 13.0537 lf*U*u126.2139 13.5928 m126.6831 13.5928 L126.6831 9.87402 L126.2139 9.87402 L126.2139 10.5117 L125.8076 10.0215 125.2964 9.7832 124.7148 9.7832 c123.6294 9.7832 122.8101 10.6865 122.8101 11.7441 c122.8101 12.8018 123.6504 13.6914 124.729 13.6914 c125.3315 13.6914 125.8428 13.4316 126.2139 12.9141 C126.2139 13.5928 lf1 D123.3003 11.7305 m123.3003 10.9248 123.9307 10.2168 124.7642 10.2168 c125.5273 10.2168 126.249 10.792 126.249 11.7158 c126.249 12.5771 125.6045 13.2285 124.771 13.2285 c123.9165 13.2285 123.3003 12.5283 123.3003 11.7305 cf*U*u0 D131.002 10.5117 m130.5957 10.0215 130.084 9.7832 129.5039 9.7832 c128.418 9.7832 127.5977 10.6865 127.5977 11.7441 c127.5977 12.8018 128.4385 13.6914 129.5176 13.6914 c130.1191 13.6914 130.6309 13.4316 131.002 12.9141 c131.002 15.0283 L131.4785 15.0283 L131.4785 9.87402 L131.002 9.87402 L131.002 10.5117 lf1 D128.0879 11.7305 m128.0879 10.9248 128.7188 10.2168 129.5527 10.2168 c130.3164 10.2168 131.0303 10.792 131.0303 11.7158 c131.0303 12.5771 130.3926 13.2285 129.5586 13.2285 c128.7051 13.2285 128.0879 12.5283 128.0879 11.7305 cf*U*u0 D133.1211 14.7344 m133.1211 14.5176 132.9395 14.335 132.7227 14.335 c132.5059 14.335 132.3301 14.5176 132.3301 14.7344 c132.3301 14.959 132.5117 15.127 132.7227 15.127 c132.9395 15.127 133.1211 14.9521 133.1211 14.7344 cf132.4912 13.5928 m132.9668 13.5928 L132.9668 9.87402 L132.4912 9.87402 L132.4912 13.5928 lf*U*u134.4297 12.9277 m134.8154 13.4316 135.2773 13.6914 135.8242 13.6914 c136.6367 13.6914 137.2041 13.1309 137.2041 11.9609 c137.2041 9.87402 L136.7275 9.87402 L136.7275 11.8984 L136.7275 12.7734 136.4551 13.2568 135.7324 13.2568 c135.334 13.2568 135.0049 13.082 134.752 12.7529 c134.4727 12.3887 134.4297 12.0244 134.4297 11.4355 c134.4297 9.87402 L133.9541 9.87402 L133.9541 13.5928 L134.4297 13.5928 L134.4297 12.9277 lf*U*u141.915 10.6309 m141.915 10.0215 141.8809 9.5166 141.5791 9.10352 c141.2637 8.67676 140.7109 8.42383 140.0029 8.42383 c138.9316 8.42383 138.4131 8.8584 138.084 9.58008 c138.6025 9.58008 L138.8828 9.08984 139.3164 8.8584 139.9746 8.8584 c140.5918 8.8584 141.0469 9.08301 141.2715 9.48926 c141.4111 9.74805 141.4316 10.0137 141.4316 10.3008 c141.4316 10.5811 L141.0605 10.1123 140.5215 9.87402 139.9395 9.87402 c138.9102 9.87402 138.0352 10.6582 138.0352 11.7578 c138.0352 12.8643 138.9531 13.6914 139.9395 13.6914 c140.5986 13.6914 141.0391 13.4111 141.4316 12.9482 c141.4316 13.5928 L141.915 13.5928 L141.915 10.6309 lf1 D138.5254 11.7305 m138.5254 10.9873 139.0508 10.3359 140.0313 10.3359 c140.8438 10.3359 141.4531 10.8965 141.4531 11.7646 c141.4531 12.6611 140.7871 13.2285 140.0176 13.2285 c139.1836 13.2285 138.5254 12.5918 138.5254 11.7305 cf*U*u0 D143.8809 10.2031 m143.8809 9.96484 143.6914 9.77637 143.4609 9.77637 c143.2227 9.77637 143.04 9.97168 143.04 10.2031 c143.04 10.4346 143.2295 10.6309 143.4609 10.6309 c143.6846 10.6309 143.8809 10.4414 143.8809 10.2031 cf*U*u148.4883 10.623 m148.124 10.0703 147.4941 9.7832 146.7441 9.7832 c145.5186 9.7832 144.6992 10.665 144.6992 11.7021 c144.6992 12.7949 145.5527 13.6914 146.7793 13.6914 c147.4941 13.6914 148.1445 13.3965 148.4883 12.8223 c148.1035 12.585 L147.7734 13.0186 147.3184 13.2285 146.7578 13.2285 c145.8125 13.2285 145.1895 12.5352 145.1895 11.7373 c145.1895 10.9248 145.8057 10.2168 146.7656 10.2168 c147.3047 10.2168 147.752 10.4346 148.1035 10.8682 C148.4883 10.623 lf*U*u153.1074 11.7227 m153.1074 10.665 152.2891 9.77637 151.168 9.77637 c150.0469 9.77637 149.2285 10.665 149.2285 11.7227 c149.2285 12.7881 150.0547 13.6914 151.168 13.6914 c152.2813 13.6914 153.1074 12.7881 153.1074 11.7227 cf1 D149.7188 11.7158 m149.7188 10.9033 150.3281 10.2383 151.168 10.2383 c152.002 10.2383 152.6172 10.9033 152.6172 11.7158 c152.6172 12.542 151.959 13.2285 151.168 13.2285 c150.3691 13.2285 149.7188 12.542 149.7188 11.7158 cf*U*u0 D156.9922 9.87402 m156.5156 9.87402 L156.5156 11.7793 L156.5156 12.0664 156.4883 12.3047 156.4805 12.4727 c156.46 12.8789 156.1309 13.2285 155.6406 13.2285 c155.3115 13.2285 154.9824 13.0674 154.7725 12.7949 c154.5059 12.4512 154.457 12.0098 154.457 11.4502 c154.457 9.87402 L153.9805 9.87402 L153.9805 13.5928 L154.457 13.5928 L154.457 12.9561 L154.7861 13.4316 155.1992 13.6914 155.7324 13.6914 c156.2988 13.6914 156.7051 13.3965 156.9082 12.7949 c157.2383 13.3896 157.7285 13.6914 158.2734 13.6914 c159.0449 13.6914 159.542 13.1377 159.542 12.0801 c159.542 9.87402 L159.0654 9.87402 L159.0654 11.9053 L159.0654 12.1787 159.0313 12.3955 159.0234 12.5352 c159.002 12.8643 158.6875 13.2285 158.1836 13.2285 c157.7207 13.2285 157.3145 12.9482 157.125 12.4727 c157.0059 12.1709 156.9922 11.8418 156.9922 11.499 C156.9922 9.87402 lf*U*u0 0 0 0 k90.5898 -1.56641 m91.0527 -1.56641 L92.1079 -4.0752 L93.2158 -1.56641 L93.2939 -1.56641 L94.4082 -4.0752 L95.4834 -1.56641 L95.9458 -1.56641 L94.4473 -5.02637 L94.3623 -5.02637 L93.2612 -2.55078 L92.1538 -5.02637 L92.0625 -5.02637 L90.5898 -1.56641 lf*U*u96.1709 -1.56641 m96.6338 -1.56641 L97.689 -4.0752 L98.7969 -1.56641 L98.875 -1.56641 L99.9893 -4.0752 L101.0645 -1.56641 L101.5269 -1.56641 L100.0283 -5.02637 L99.9434 -5.02637 L98.8423 -2.55078 L97.7349 -5.02637 L97.6436 -5.02637 L96.1709 -1.56641 lf*U*u101.752 -1.56641 m102.2148 -1.56641 L103.27 -4.0752 L104.3779 -1.56641 L104.4561 -1.56641 L105.5703 -4.0752 L106.6455 -1.56641 L107.1079 -1.56641 L105.6094 -5.02637 L105.5244 -5.02637 L104.4233 -2.55078 L103.3159 -5.02637 L103.2246 -5.02637 L101.752 -1.56641 lf*U*u108.6821 -4.71973 m108.6821 -4.94141 108.5059 -5.11719 108.291 -5.11719 c108.0693 -5.11719 107.8999 -4.93555 107.8999 -4.71973 c107.8999 -4.50488 108.0762 -4.32227 108.291 -4.32227 c108.4995 -4.32227 108.6821 -4.49902 108.6821 -4.71973 cf*U*u113.2183 -3.30664 m113.2183 -4.29004 112.4561 -5.11719 111.4136 -5.11719 c110.3711 -5.11719 109.6089 -4.29004 109.6089 -3.30664 c109.6089 -2.31543 110.3774 -1.47559 111.4136 -1.47559 c112.4492 -1.47559 113.2183 -2.31543 113.2183 -3.30664 cf1 D110.0649 -3.3125 m110.0649 -4.06836 110.6313 -4.6875 111.4136 -4.6875 c112.189 -4.6875 112.7622 -4.06836 112.7622 -3.3125 c112.7622 -2.54395 112.1499 -1.90527 111.4136 -1.90527 c110.6709 -1.90527 110.0649 -2.54395 110.0649 -3.3125 cf*U*u0 D114.4136 -1.02539 m114.4136 -0.46582 114.5503 -0.132813 115.1172 -0.132813 c115.3062 -0.132813 115.4819 -0.185547 115.6255 -0.231445 c115.6255 -0.667969 L115.5215 -0.62207 115.3843 -0.563477 115.2085 -0.563477 c114.8438 -0.563477 114.8569 -0.785156 114.8569 -1.09766 c114.8569 -1.56641 L115.5864 -1.56641 L115.5864 -1.95801 L114.8569 -1.95801 L114.8569 -5.02637 L114.4136 -5.02637 L114.4136 -1.95801 L113.9575 -1.95801 L113.9575 -1.56641 L114.4136 -1.56641 L114.4136 -1.02539 lf*U*u119.8486 -4.32227 m119.8486 -4.88965 119.8164 -5.3584 119.5361 -5.74316 c119.2427 -6.14063 118.728 -6.375 118.0698 -6.375 c117.0732 -6.375 116.5908 -5.9707 116.2847 -5.2998 c116.7671 -5.2998 L117.0273 -5.75586 117.4316 -5.9707 118.0439 -5.9707 c118.6172 -5.9707 119.041 -5.7627 119.2495 -5.38477 c119.3799 -5.14355 119.3994 -4.89648 119.3994 -4.62891 c119.3994 -4.36816 L119.0537 -4.80469 118.5522 -5.02637 118.0112 -5.02637 c117.0537 -5.02637 116.2393 -4.29688 116.2393 -3.27344 c116.2393 -2.24414 117.0928 -1.47559 118.0112 -1.47559 c118.624 -1.47559 119.0342 -1.73633 119.3994 -2.16602 c119.3994 -1.56641 L119.8486 -1.56641 L119.8486 -4.32227 lf1 D116.6953 -3.2998 m116.6953 -3.99023 117.1841 -4.59668 118.0962 -4.59668 c118.8521 -4.59668 119.4189 -4.0752 119.4189 -3.26758 c119.4189 -2.43359 118.7998 -1.90527 118.083 -1.90527 c117.3076 -1.90527 116.6953 -2.49805 116.6953 -3.2998 cf*U*u0 D121.3633 -0.276367 m121.8062 -0.276367 L121.8062 -1.56641 L122.5166 -1.56641 L122.5166 -1.95801 L121.8062 -1.95801 L121.8062 -5.02637 L121.3633 -5.02637 L121.3633 -1.95801 L120.751 -1.95801 L120.751 -1.56641 L121.3633 -1.56641 L121.3633 -0.276367 lf*U*u123.6328 -2.06836 m123.8931 -1.69043 124.1733 -1.47559 124.5254 -1.47559 c124.7271 -1.47559 124.8315 -1.54102 124.9229 -1.59277 c124.688 -1.9707 L124.6362 -1.94434 124.5513 -1.90527 124.4536 -1.90527 c124.1279 -1.90527 123.8345 -2.18555 123.7041 -2.66113 c123.6455 -2.88281 123.6328 -3.24121 123.6328 -3.70996 c123.6328 -5.02637 L123.1636 -5.02637 L123.1636 -1.56641 L123.6328 -1.56641 L123.6328 -2.06836 lf*U*u128.4746 -1.56641 m128.9121 -1.56641 L128.9121 -5.02637 L128.4746 -5.02637 L128.4746 -4.43359 L128.0977 -4.88965 127.6211 -5.11133 127.0801 -5.11133 c126.0708 -5.11133 125.3086 -4.27051 125.3086 -3.28711 c125.3086 -2.30273 126.0903 -1.47559 127.0938 -1.47559 c127.6543 -1.47559 128.1299 -1.7168 128.4746 -2.19824 C128.4746 -1.56641 lf1 D125.7646 -3.2998 m125.7646 -4.04883 126.3511 -4.70703 127.127 -4.70703 c127.8359 -4.70703 128.5078 -4.17285 128.5078 -3.3125 c128.5078 -2.51172 127.9082 -1.90527 127.1328 -1.90527 c126.3379 -1.90527 125.7646 -2.55664 125.7646 -3.2998 cf*U*u0 D133.0977 -4.43359 m132.7197 -4.88965 132.2441 -5.11133 131.7031 -5.11133 c130.6934 -5.11133 129.9316 -4.27051 129.9316 -3.28711 c129.9316 -2.30273 130.7129 -1.47559 131.7168 -1.47559 c132.2773 -1.47559 132.752 -1.7168 133.0977 -2.19824 c133.0977 -0.231445 L133.541 -0.231445 L133.541 -5.02637 L133.0977 -5.02637 L133.0977 -4.43359 lf1 D130.3867 -3.2998 m130.3867 -4.04883 130.9736 -4.70703 131.749 -4.70703 c132.459 -4.70703 133.124 -4.17285 133.124 -3.3125 c133.124 -2.51172 132.5313 -1.90527 131.7559 -1.90527 c130.9609 -1.90527 130.3867 -2.55664 130.3867 -3.2998 cf*U*u0 D135.2383 -0.504883 m135.2383 -0.707031 135.0684 -0.875977 134.8662 -0.875977 c134.6641 -0.875977 134.502 -0.707031 134.502 -0.504883 c134.502 -0.295898 134.6709 -0.139648 134.8662 -0.139648 c135.0684 -0.139648 135.2383 -0.302734 135.2383 -0.504883 cf134.6514 -1.56641 m135.0938 -1.56641 L135.0938 -5.02637 L134.6514 -5.02637 L134.6514 -1.56641 lf*U*u136.6191 -2.18555 m136.9785 -1.7168 137.4082 -1.47559 137.916 -1.47559 c138.6719 -1.47559 139.2002 -1.99707 139.2002 -3.08496 c139.2002 -5.02637 L138.7568 -5.02637 L138.7568 -3.14355 L138.7568 -2.3291 138.5029 -1.87891 137.832 -1.87891 c137.4609 -1.87891 137.1543 -2.04199 136.9199 -2.34863 c136.6592 -2.6875 136.6191 -3.02637 136.6191 -3.57324 c136.6191 -5.02637 L136.1768 -5.02637 L136.1768 -1.56641 L136.6191 -1.56641 L136.6191 -2.18555 lf*U*u143.75 -4.32227 m143.75 -4.88965 143.7188 -5.3584 143.4375 -5.74316 c143.1445 -6.14063 142.6299 -6.375 141.9717 -6.375 c140.9746 -6.375 140.4922 -5.9707 140.1865 -5.2998 c140.6689 -5.2998 L140.9297 -5.75586 141.334 -5.9707 141.9453 -5.9707 c142.5195 -5.9707 142.9434 -5.7627 143.1514 -5.38477 c143.2813 -5.14355 143.3008 -4.89648 143.3008 -4.62891 c143.3008 -4.36816 L142.9551 -4.80469 142.4541 -5.02637 141.9131 -5.02637 c140.9551 -5.02637 140.1406 -4.29688 140.1406 -3.27344 c140.1406 -2.24414 140.9941 -1.47559 141.9131 -1.47559 c142.5254 -1.47559 142.9355 -1.73633 143.3008 -2.16602 c143.3008 -1.56641 L143.75 -1.56641 L143.75 -4.32227 lf1 D140.5977 -3.2998 m140.5977 -3.99023 141.0859 -4.59668 141.998 -4.59668 c142.7539 -4.59668 143.3203 -4.0752 143.3203 -3.26758 c143.3203 -2.43359 142.7012 -1.90527 141.9844 -1.90527 c141.209 -1.90527 140.5977 -2.49805 140.5977 -3.2998 cf*U*u0 D145.748 -4.71973 m145.748 -4.94141 145.5723 -5.11719 145.3574 -5.11719 c145.1348 -5.11719 144.9658 -4.93555 144.9658 -4.71973 c144.9658 -4.50488 145.1426 -4.32227 145.3574 -4.32227 c145.5654 -4.32227 145.748 -4.49902 145.748 -4.71973 cf*U*u150.1992 -4.3291 m149.8604 -4.84375 149.2734 -5.11133 148.5762 -5.11133 c147.4365 -5.11133 146.6738 -4.29004 146.6738 -3.32617 c146.6738 -2.30957 147.4688 -1.47559 148.6094 -1.47559 c149.2734 -1.47559 149.8799 -1.74902 150.1992 -2.2832 c149.8408 -2.50488 L149.5342 -2.10059 149.1113 -1.90527 148.5898 -1.90527 c147.71 -1.90527 147.1309 -2.55078 147.1309 -3.29297 c147.1309 -4.04883 147.7031 -4.70703 148.5957 -4.70703 c149.0977 -4.70703 149.5146 -4.50488 149.8408 -4.10156 C150.1992 -4.3291 lf*U*u154.665 -3.30664 m154.665 -4.29004 153.9023 -5.11719 152.8604 -5.11719 c151.8184 -5.11719 151.0557 -4.29004 151.0557 -3.30664 c151.0557 -2.31543 151.8242 -1.47559 152.8604 -1.47559 c153.8965 -1.47559 154.665 -2.31543 154.665 -3.30664 cf1 D151.5117 -3.3125 m151.5117 -4.06836 152.0781 -4.6875 152.8604 -4.6875 c153.6357 -4.6875 154.209 -4.06836 154.209 -3.3125 c154.209 -2.54395 153.5967 -1.90527 152.8604 -1.90527 c152.1172 -1.90527 151.5117 -2.54395 151.5117 -3.3125 cf*U*u0 D158.4473 -5.02637 m158.0039 -5.02637 L158.0039 -3.25391 L158.0039 -2.9873 157.9785 -2.76563 157.9707 -2.60938 c157.9512 -2.23145 157.6455 -1.90527 157.1895 -1.90527 c156.8828 -1.90527 156.5771 -2.05566 156.3818 -2.30957 c156.1348 -2.62891 156.0879 -3.03906 156.0879 -3.56055 c156.0879 -5.02637 L155.6455 -5.02637 L155.6455 -1.56641 L156.0879 -1.56641 L156.0879 -2.15918 L156.3945 -1.7168 156.7793 -1.47559 157.2744 -1.47559 c157.8027 -1.47559 158.1797 -1.74902 158.3691 -2.30957 c158.6758 -1.75586 159.1309 -1.47559 159.6387 -1.47559 c160.3555 -1.47559 160.8184 -1.99023 160.8184 -2.97363 c160.8184 -5.02637 L160.375 -5.02637 L160.375 -3.13672 L160.375 -2.88281 160.3438 -2.68066 160.3359 -2.55078 c160.3164 -2.24414 160.0234 -1.90527 159.5547 -1.90527 c159.125 -1.90527 158.7461 -2.16602 158.5703 -2.60938 c158.46 -2.88965 158.4473 -3.19531 158.4473 -3.51465 C158.4473 -5.02637 lf*UUu*u93.7476 60.2705 m95.6514 60.2705 L96.5015 60.2705 97.2866 60.2275 98.0503 59.916 c99.438 59.3564 100.2666 58.0225 100.2666 56.3223 c100.2666 54.1172 98.9326 52.5469 96.4478 52.5469 c93.7476 52.5469 L93.7476 60.2705 lf1 D95.6621 53.2998 m97.1255 53.2998 98.0933 53.4287 98.7817 54.2676 c99.2231 54.8057 99.4595 55.5049 99.4595 56.3115 c99.4595 57.0977 99.2446 57.7969 98.814 58.3555 c98.0825 59.3135 96.9854 59.5176 95.3071 59.5176 c94.522 59.5176 L94.522 53.2998 L95.6621 53.2998 lf*U*u0 D107.5942 55.3867 m107.5942 53.7627 106.3354 52.3965 104.6143 52.3965 c102.8931 52.3965 101.6348 53.7627 101.6348 55.3867 c101.6348 57.0215 102.9038 58.4102 104.6143 58.4102 c106.3247 58.4102 107.5942 57.0215 107.5942 55.3867 cf1 D102.3877 55.376 m102.3877 54.1279 103.3232 53.1064 104.6143 53.1064 c105.8945 53.1064 106.8413 54.1279 106.8413 55.376 c106.8413 56.6455 105.8301 57.6992 104.6143 57.6992 c103.3882 57.6992 102.3877 56.6455 102.3877 55.376 cf*U*u0 D109.9521 57.2373 m110.5435 58.0117 111.2534 58.4102 112.0928 58.4102 c113.3403 58.4102 114.2119 57.5488 114.2119 55.7529 c114.2119 52.5469 L113.4805 52.5469 L113.4805 55.6563 L113.4805 57 113.061 57.7432 111.9526 57.7432 c111.3398 57.7432 110.834 57.4736 110.4468 56.9678 c110.0166 56.4092 109.9521 55.8496 109.9521 54.9453 c109.9521 52.5469 L109.2202 52.5469 L109.2202 58.2588 L109.9521 58.2588 L109.9521 57.2373 lf*U*u119.3457 53.7842 m119.9155 53.375 120.3999 53.0742 120.8623 53.0742 c121.1851 53.0742 121.4756 53.2246 121.6689 53.4824 c121.9165 53.8164 121.9487 54.2568 121.9487 54.8057 c121.9487 60.2705 L122.7231 60.2705 L122.7231 54.7842 L122.7231 53.9775 122.6479 53.3535 122.2393 52.9023 c121.9272 52.5576 121.4219 52.3643 120.8623 52.3643 c120.0986 52.3643 119.5283 52.6758 118.9365 53.1709 C119.3457 53.7842 lf*U*u126.21 53.0527 m126.21 52.6865 125.9194 52.3965 125.5645 52.3965 c125.1987 52.3965 124.9189 52.6973 124.9189 53.0527 c124.9189 53.4072 125.2095 53.709 125.5645 53.709 c125.9087 53.709 126.21 53.418 126.21 53.0527 cf*U*u130.6104 59.5176 m130.6104 60.2705 L134.8496 60.2705 L134.8496 59.5176 L133.1279 59.5176 L133.1279 52.5469 L132.3535 52.5469 L132.3535 59.5176 L130.6104 59.5176 lf*U*u136.2695 57.4307 m136.7002 58.0547 137.1621 58.4102 137.7441 58.4102 c138.0771 58.4102 138.25 58.3018 138.4004 58.2158 c138.0127 57.5918 L137.9268 57.6348 137.7871 57.6992 137.625 57.6992 c137.0879 57.6992 136.6035 57.2373 136.3887 56.4521 c136.291 56.0859 136.2695 55.4941 136.2695 54.7197 c136.2695 52.5469 L135.4961 52.5469 L135.4961 58.2588 L136.2695 58.2588 L136.2695 57.4307 lf*U*u144.2637 58.2588 m144.9844 58.2588 L144.9844 52.5469 L144.2637 52.5469 L144.2637 53.5254 L143.6396 52.7725 142.8545 52.4072 141.9609 52.4072 c140.2939 52.4072 139.0352 53.7949 139.0352 55.4189 c139.0352 57.0439 140.3262 58.4102 141.9824 58.4102 c142.9082 58.4102 143.6934 58.0117 144.2637 57.2158 C144.2637 58.2588 lf1 D139.7891 55.3975 m139.7891 54.1602 140.7568 53.0742 142.0371 53.0742 c143.209 53.0742 144.3174 53.9561 144.3174 55.376 c144.3174 56.6992 143.3281 57.6992 142.0469 57.6992 c140.7354 57.6992 139.7891 56.624 139.7891 55.3975 cf*U*u0 D146.374 58.2588 m147.1592 58.2588 L149.0742 54.1064 L150.9668 58.2588 L151.752 58.2588 L149.1387 52.5469 L149.0098 52.5469 L146.374 58.2588 lf*U*u154.0137 60.0127 m154.0137 59.6787 153.7334 59.3994 153.4004 59.3994 c153.0664 59.3994 152.7969 59.6787 152.7969 60.0127 c152.7969 60.3564 153.0771 60.6152 153.4004 60.6152 c153.7334 60.6152 154.0137 60.3457 154.0137 60.0127 cf153.0449 58.2588 m153.7764 58.2588 L153.7764 52.5469 L153.0449 52.5469 L153.0449 58.2588 lf*U*u155.4873 53.7412 m155.8535 53.332 156.251 53.1064 156.6816 53.1064 c157.2402 53.1064 157.7363 53.5146 157.7363 54.0527 c157.7363 54.3867 157.542 54.6982 157.2617 54.8486 c155.9502 55.5801 155.2832 55.8926 155.2832 56.8926 c155.2832 57.7969 155.9824 58.4102 156.8535 58.4102 c157.4775 58.4102 157.9512 58.1084 158.4355 57.6348 c157.9609 57.1514 L157.6172 57.4844 157.2734 57.6992 156.8105 57.6992 c156.3379 57.6992 155.9502 57.3662 155.9502 56.9355 c155.9502 56.6455 156.1328 56.3223 156.3906 56.1719 c157.7031 55.4082 158.4355 55.1182 158.4355 54.085 c158.4355 53.1924 157.7461 52.3965 156.7139 52.3965 c156.0791 52.3965 155.4336 52.6865 155.0254 53.2139 C155.4873 53.7412 lf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF